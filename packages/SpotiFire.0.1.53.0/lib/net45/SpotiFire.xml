<?xml version="1.0"?>
<doc>
  <assembly>
        SpotiFire.dll
    </assembly>
  <members>
    <member name="M:SpotiFire.ErrorExtensions.Message(SpotiFire.Error)">
-------------------------------------------------------------------------------------------------
<summary>	Using libspotify to convert Error to a nice string in English. </summary><remarks>	EraYaN, 30.04.2013 </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.ErrorExtensions">
-------------------------------------------------------------------------------------------------
<summary>	The ErrorExtension class containing all the extension method for the Error Enum. </summary><remarks>	EraYaN, 30.04.2013 </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Inbox.op_Inequality(SpotiFire.Inbox,SpotiFire.Inbox)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given albums should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The inbox on the left-hand side of the operator. </param><param name="right">	The inbox on the right-hand side of the operator. </param><returns>	true if the given inboxes are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Inbox.op_Equality(SpotiFire.Inbox,SpotiFire.Inbox)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given inboxes should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The inbox on the left-hand side of the operator. </param><param name="right">	The inbox on the right-hand side of the operator. </param><returns>	true if the given inboxes are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Inbox.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this inbox is considered to be the same as the given object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the inbox, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Inbox.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this inbox. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Inbox.PostTracks(SpotiFire.Session,System.String,SpotiFire.Track[],System.String)">
-------------------------------------------------------------------------------------------------
<summary>	Posts a track to the given inbox. </summary><remarks>	Aleksander, 03.02.2013. </remarks><param name="user">   	The user to receive the track. </param><param name="tracks"> 	The tracks. </param><param name="message">	The message to pass allong the tracks. </param><returns>	A task representing the pending operation. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Inbox.Error">
-------------------------------------------------------------------------------------------------
<summary>	Gets the error. </summary><value>	The error. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Inbox.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Inbox">
-------------------------------------------------------------------------------------------------
<summary>	Inbox. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.ToplistBrowse.CreateToplistBrowse(SpotiFire.Session,SpotiFire.ToplistType,SpotiFire.ToplistRegion,System.String)">
-------------------------------------------------------------------------------------------------
<summary>	Initiate a request for browsing an toplist. </summary><remarks>	Aleksander, 09.05.2013. </remarks><param name="session"> 	The session. </param><param name="type">	   	The type. </param><param name="region">  	The region. </param><param name="username">	If region is User, this specifies which user to get toplist for, use null for the logged in user. </param><returns>	The new toplist browse. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.ToplistBrowse.op_Inequality(SpotiFire.ToplistBrowse,SpotiFire.ToplistBrowse)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given toplistbrowse objects should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The toplistbrowse object on the left-hand side of the operator. </param><param name="right">	The toplistbrowse object on the right-hand side of the operator.
			</param><returns>	true if the given toplistbrowse objects are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.ToplistBrowse.op_Equality(SpotiFire.ToplistBrowse,SpotiFire.ToplistBrowse)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given toplistbrowse objects should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The toplistbrowse object on the left-hand side of the operator. </param><param name="right">	The toplistbrowse object on the right-hand side of the operator.
			</param><returns>	true if the given toplistbrowse objects are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.ToplistBrowse.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this toplistbrowse object is considered to be the same as the given
			object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the toplistbrowse object, otherwise false.
			</returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.ToplistBrowse.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this toplistbrowse object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ToplistBrowse.BackendRequestDuration">
-------------------------------------------------------------------------------------------------
<summary>	Gets the duration of the backend request. </summary><value>	The backend request duration. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ToplistBrowse.Tracks">
-------------------------------------------------------------------------------------------------
<summary>	Gets the tracks. </summary><value>	The tracks. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ToplistBrowse.Albums">
-------------------------------------------------------------------------------------------------
<summary>	Gets the albums. </summary><value>	The albums. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ToplistBrowse.Artists">
-------------------------------------------------------------------------------------------------
<summary>	Gets the artists. </summary><value>	The artists. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ToplistBrowse.IsReady">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is ready. </summary><value>	true if this object is ready, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ToplistBrowse.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is loaded. </summary><value>	true if this object is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ToplistBrowse.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.op_Inequality(SpotiFire.Link,SpotiFire.Link)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given links should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The link on the left-hand side of the operator. </param><param name="right">	The link on the right-hand side of the operator. </param><returns>	true if the given links are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.op_Equality(SpotiFire.Link,SpotiFire.Link)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given links should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The link on the left-hand side of the operator. </param><param name="right">	The link on the right-hand side of the operator. </param><returns>	true if the given links are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this link is considered to be the same as the given object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the link, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this link. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.AsPlaylist">
-------------------------------------------------------------------------------------------------
<summary>	Converts this object to a playlist. </summary><remarks>	Aleksander, 03.02.2013. </remarks><returns>	null if it fails, else a list of. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.AsUser">
-------------------------------------------------------------------------------------------------
<summary>	Converts this object to an user. </summary><remarks>	Aleksander, 03.02.2013. </remarks><returns>	null if it fails, else. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.AsArtist">
-------------------------------------------------------------------------------------------------
<summary>	Converts this object to an artist. </summary><remarks>	Aleksander, 03.02.2013. </remarks><returns>	null if it fails, else. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.AsAlbum">
-------------------------------------------------------------------------------------------------
<summary>	Converts this object to an album. </summary><remarks>	Aleksander, 03.02.2013. </remarks><returns>	null if it fails, else. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.AsTrack(System.TimeSpan@)">
-------------------------------------------------------------------------------------------------
<summary>	Converts an offset to a track. </summary><remarks>	Aleksander, 03.02.2013. </remarks><param name="offset">	[out] The offset. </param><returns>	null if it fails, else. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.AsTrack">
-------------------------------------------------------------------------------------------------
<summary>	Converts this object to a track. </summary><remarks>	Aleksander, 03.02.2013. </remarks><returns>	null if it fails, else. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Link.Type">
-------------------------------------------------------------------------------------------------
<summary>	Gets the type. </summary><value>	The type. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Link.ToString">
-------------------------------------------------------------------------------------------------
<summary>	Convert this object into a string representation. </summary><remarks>	Aleksander, 03.02.2013. </remarks><returns>	This object as a String^. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Link.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Link">
-------------------------------------------------------------------------------------------------
<summary>	Link. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.User.op_Inequality(SpotiFire.User,SpotiFire.User)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given users should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The user on the left-hand side of the operator. </param><param name="right">	The user on the right-hand side of the operator. </param><returns>	true if the given users are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.User.op_Equality(SpotiFire.User,SpotiFire.User)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given users should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The user on the left-hand side of the operator. </param><param name="right">	The user on the right-hand side of the operator. </param><returns>	true if the given users are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.User.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this user is considered to be the same as the given object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the user, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.User.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this user. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.User.GetLink">
-------------------------------------------------------------------------------------------------
<summary>   Create a <see cref="!:SpotiFire.Link" /> object representing the user. </summary><remarks>   You need to Dispose the <see cref="!:SpotiFire.Link" /> object when you are done with
			it. </remarks><returns>	A <see cref="!:SpotiFire.Link" /> object representing this user. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.User.IsReady">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is ready. </summary><value>	true if this object is ready, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.User.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is loaded. </summary><value>	true if this object is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.User.DisplayName">
-------------------------------------------------------------------------------------------------
<summary>	Gets the display username. </summary><value>	A string representing the display username. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.User.CanonicalName">
-------------------------------------------------------------------------------------------------
<summary>	Gets the canonical username. </summary><value>	A string representing the canonical username. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.User.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.User">
-------------------------------------------------------------------------------------------------
<summary>	User. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Track.op_Inequality(SpotiFire.Track,SpotiFire.Track)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given tracks should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The track on the left-hand side of the operator. </param><param name="right">	The track on the right-hand side of the operator. </param><returns>	true if the given tracks are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Track.op_Equality(SpotiFire.Track,SpotiFire.Track)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given tracks should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The track on the left-hand side of the operator. </param><param name="right">	The track on the right-hand side of the operator. </param><returns>	true if the given tracks are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Track.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this track is considered to be the same as the given object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the track, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Track.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this track. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Track.GetLink(System.TimeSpan)">
-------------------------------------------------------------------------------------------------
<summary>   Create a <see cref="!:SpotiFire.Link" /> object representing the track. </summary><remarks>   You need to Dispose the <see cref="!:SpotiFire.Link" /> object when you are done with
			it. </remarks><param name="offset">	Offset in track. </param><returns>	A <see cref="!:SpotiFire.Link" /> object representing this track. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Track.GetLink">
-------------------------------------------------------------------------------------------------
<summary>   Create a <see cref="!:SpotiFire.Link" /> object representing the track. </summary><remarks>   You need to Dispose the <see cref="!:SpotiFire.Link" /> object when you are done with
			it. </remarks><returns>	A <see cref="!:SpotiFire.Link" /> object representing this track. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Track.GetPlayable">
-------------------------------------------------------------------------------------------------
<summary>	Return the actual track that will be played if the given track is played. </summary><remarks>	Aleksander, 03.02.2013. </remarks><returns>	null if it fails, else the actual track. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.Name">
-------------------------------------------------------------------------------------------------
<summary>	Gets the name. </summary><value>	The name. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.IsAvailable">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is available. </summary><value>	true if this object is available, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.Availability">
-------------------------------------------------------------------------------------------------
<summary>	Gets the availability. </summary><value>	The availability. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.Index">
-------------------------------------------------------------------------------------------------
<summary>	Gets zero-based index of this object. </summary><value>	The index. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.Disc">
-------------------------------------------------------------------------------------------------
<summary>	Gets the disc number. </summary><value>	The disc number. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.Popularity">
-------------------------------------------------------------------------------------------------
<summary>	Gets the popularity. </summary><value>	The popularity. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.Duration">
-------------------------------------------------------------------------------------------------
<summary>	Gets the duration. </summary><value>	The duration. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.Album">
-------------------------------------------------------------------------------------------------
<summary>	Gets the album. </summary><value>	The album. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.Artists">
-------------------------------------------------------------------------------------------------
<summary>	Gets the artists. </summary><value>	The artists. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.IsStarred">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is starred. </summary><value>	true if this object is starred, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.IsPlaceholder">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is a placeholder. </summary><value>	true if this object is a placeholder, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.IsAutolinked">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is autolinked. </summary><value>	true if this object is autolinked, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.IsLocal">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is local. </summary><value>	true if this object is local, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.IsReady">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is ready. </summary><value>	true if this object is ready, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is loaded. </summary><value>	true if this object is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Track.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Track">
-------------------------------------------------------------------------------------------------
<summary>	Track. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Search.op_Inequality(SpotiFire.Search,SpotiFire.Search)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given search objects should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The search object on the left-hand side of the operator. </param><param name="right">	The search object on the right-hand side of the operator. </param><returns>	true if the given search objects are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Search.op_Equality(SpotiFire.Search,SpotiFire.Search)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given search objects should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The search object on the left-hand side of the operator. </param><param name="right">	The search object on the right-hand side of the operator. </param><returns>	true if the given searches are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Search.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this search object is considered to be the same as the given object.
			</summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the search object, otherwise false.
			</returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Search.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this search object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Search.GetLink">
-------------------------------------------------------------------------------------------------
<summary>   Create a <see cref="!:SpotiFire.Link" /> object representing the search. </summary><remarks>   You need to Dispose the <see cref="!:SpotiFire.Link" /> object when you are done with
			it. </remarks><returns>	A <see cref="!:SpotiFire.Link" /> object representing this search. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.TotalArtists">
-------------------------------------------------------------------------------------------------
<summary>	Gets the total artists. </summary><value>	The total number of artists. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.TotalPlaylists">
-------------------------------------------------------------------------------------------------
<summary>	Gets the total playlists. </summary><value>	The total number of playlists. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.TotalAlbums">
-------------------------------------------------------------------------------------------------
<summary>	Gets the total albums. </summary><value>	The total number of albums. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.TotalTracks">
-------------------------------------------------------------------------------------------------
<summary>	Gets the total tracks. </summary><value>	The total number of tracks. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.Artists">
-------------------------------------------------------------------------------------------------
<summary>	Gets the artists. </summary><value>	The artists. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.Playlists">
-------------------------------------------------------------------------------------------------
<summary>	Gets the playlists. </summary><value>	The playlists. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.Albums">
-------------------------------------------------------------------------------------------------
<summary>	Gets the albums. </summary><value>	The albums. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.Tracks">
-------------------------------------------------------------------------------------------------
<summary>	Gets the tracks. </summary><value>	The tracks. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.DidYouMean">
-------------------------------------------------------------------------------------------------
<summary>	Gets the did you mean. </summary><value>	The did you mean. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.Query">
-------------------------------------------------------------------------------------------------
<summary>	Gets the query. </summary><value>	The query. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.Error">
-------------------------------------------------------------------------------------------------
<summary>	Gets the error. </summary><value>	The error. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is loaded. </summary><value>	true if this object is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Search.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Search">
-------------------------------------------------------------------------------------------------
<summary>	Search. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PlaylistContainer.op_Inequality(SpotiFire.PlaylistContainer,SpotiFire.PlaylistContainer)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given playlistcontainers should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The playlistcontainer on the left-hand side of the operator. </param><param name="right">	The playlistcontainer on the right-hand side of the operator. </param><returns>	true if the given playlistcontainers are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PlaylistContainer.op_Equality(SpotiFire.PlaylistContainer,SpotiFire.PlaylistContainer)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given playlistcontainers should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The playlistcontainer on the left-hand side of the operator. </param><param name="right">	The playlistcontainer on the right-hand side of the operator. </param><returns>	true if the given playlistcontainers are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PlaylistContainer.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this playlistcontainer is considered to be the same as the given object.
			</summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the playlistcontainer, otherwise false.
			</returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PlaylistContainer.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this playlistcontainer. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.PlaylistContainer.Owner">
-------------------------------------------------------------------------------------------------
<summary>	Gets the owner. </summary><value>	The owner. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.PlaylistContainer.Playlists">
-------------------------------------------------------------------------------------------------
<summary>	Gets the playlists. </summary><value>	The playlists. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.PlaylistContainer.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is loaded. </summary><value>	true if this object is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.PlaylistContainer.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.PlaylistContainer">
-------------------------------------------------------------------------------------------------
<summary>	Playlist container. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.PlaylistContainerHandler`1">
-------------------------------------------------------------------------------------------------
<summary>	Delegate for handling PlaylistContainer events. </summary><remarks>	Aleksander, 03.02.2013. </remarks><typeparam name="TEventArgs">	Type of EventArgs used. </typeparam><param name="sender">	The sender. </param><param name="args">  	The EventArgs to process. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Playlist.op_Inequality(SpotiFire.Playlist,SpotiFire.Playlist)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given playlists should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The playlist on the left-hand side of the operator. </param><param name="right">	The playlist on the right-hand side of the operator. </param><returns>	true if the given playlists are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Playlist.op_Equality(SpotiFire.Playlist,SpotiFire.Playlist)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given playlists should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The playlist on the left-hand side of the operator. </param><param name="right">	The playlist on the right-hand side of the operator. </param><returns>	true if the given playlists are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Playlist.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this playlist is considered to be the same as the given object.
			</summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the playlist, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Playlist.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this playlist. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Playlist.SubscribersChanged">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in SubscribersChanged events. </summary><remarks>	The SubscribersChanged event provides a way for applications to be notified
			whenever the when playlist subscribers changes (count or list of names).
			</remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Playlist.TrackMessageChanged">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in TrackMessageChanged events. </summary><remarks>	The TrackSeenChanged event provides a way for applications to be notified
			whenever the message attribute for a playlist entry changes. Use
			<see cref="!:SpotiFire.Playlist.GetTrackMessage" /> to retrieve the value.
			</remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Playlist.ImageChanged">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in ImageChanged events. </summary><remarks>	The ImageChanged event provides a way for applications to be notified whenever
			the image of the playlist has been changed. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Playlist.DescriptionChanged">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in DescriptionChanged events. </summary><remarks>	The MetadataUpdated event provides a way for applications to be notified whenever
			the description of the playlist has been changed. Use
			<see cref="!:SpotiFire.Playlist.Description" /> to retrieve the value. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Playlist.TrackSeenChanged">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in TrackSeenChanged events. </summary><remarks>	The TrackSeenChanged event provides a way for applications to be notified
			whenever the seen attribute for a playlist entry changes. Use
			<see cref="!:SpotiFire.Playlist.GetTrackSeen" /> to retrieve the value. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Playlist.TrackCreatedChanged">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in TrackCreatedChanged events. </summary><remarks>	The TrackCreatedChanged event provides a way for applications to be notified
			whenever create time and/or creator for the playlist entry changes. Use
			<see cref="!:SpotiFire.Playlist.GetTrackCreateTime" /> and
			<see cref="!:SpotiFire.Playlist.GetTrackCreator" /> to retrieve this data.
			</remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Playlist.MetadataUpdated">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in MetadataUpdated events. </summary><remarks>	The MetadataUpdated event provides a way for applications to be notified whenever
			the metadata for one or more tracks in the playlist has been updated. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Playlist.UpdateInProgress">
      <summary>	Event queue for all listeners interested in UpdateInProgress events. </summary>
      <remarks>	The UpdateInProgress event provides a way for applications to be notified whenever
			a playlist is updating or is done updating. </remarks>
      <remarks>	This is called before and after a series of changes are applied to the playlist.
			It allows e.g. the user interface to defer updating until the entire operation is
			complete. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Playlist.StateChanged">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in StateChanged events. </summary><remarks>	The StateChanged event provides a way for applications to be notified whenever
			the state of the playlist has been updated. There are three states that trigger
			this callback:
			- Collaboration for this playlist has been turned on or off;
			- The playlist started having pending changes, or all pending changes have now
			  been committed;
			- The playlist started loading, or finished loading. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Playlist.Renamed">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in Renamed events. </summary><remarks>	The Renamed event provides a way for applications to be notified whenever
			the name of the playlist has been updated. Use
			<see cref="!:SpotiFire.Playlist.Name" /> to retrieve the new name. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Playlist.GetLink">
-------------------------------------------------------------------------------------------------
<summary>   Create a <see cref="!:SpotiFire.Link" /> object representing the playlist. </summary><remarks>   You need to Dispose the <see cref="!:SpotiFire.Link" /> object when you are done with
			it. </remarks><remarks>	Due to reasons in the playlist backend design and the Spotify URI scheme you need
			to wait for the playlist to be loaded before you can successfully construct a
			link. If the playlist is not loaded when this method is called (
			see <see cref="!:SpotiFire.Playlist.IsLoaded" />), null we be returned. </remarks><returns>	A <see cref="!:SpotiFire.Link" /> object representing this playlist, or null if the
			playlist is not loaded (yet). </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.IsReady">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is ready. </summary><value>	true if this object is ready, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is loaded. </summary><value>	true if this object is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.HasPendingChanges">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object has pending changes. </summary><value>	true if this object has pending changes, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.Description">
-------------------------------------------------------------------------------------------------
<summary>	Gets the description. </summary><value>	The description. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.IsAutolinked">
-------------------------------------------------------------------------------------------------
<summary>	Sets a value indicating whether this object is autolinked. </summary><value>	true if this object is autolinked, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.IsCollaborative">
-------------------------------------------------------------------------------------------------
<summary>	Gets or sets a value indicating whether this object is collaborative. </summary><value>	true if this object is collaborative, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.Owner">
-------------------------------------------------------------------------------------------------
<summary>	Gets the owner. </summary><value>	The owner. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.Name">
-------------------------------------------------------------------------------------------------
<summary>	Sets the name. </summary><value>	The name. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.Tracks">
-------------------------------------------------------------------------------------------------
<summary>	Gets the tracks. </summary><value>	The tracks. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.OfflineStatus">
-------------------------------------------------------------------------------------------------
<summary>	Gets the offline status. </summary><value>	The offline status. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.Offline">
-------------------------------------------------------------------------------------------------
<summary>	Gets or sets a value indicating whether the offline. </summary><value>	true if offline, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.InRam">
-------------------------------------------------------------------------------------------------
<summary>	Gets or sets a value indicating whether the in ram. </summary><value>	true if in ram, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Playlist.Type">
-------------------------------------------------------------------------------------------------
<summary>	Gets the type of the playlist. </summary><value>	The connection type. <see cref="T:SpotiFire.PlaylistType" /> for possible values. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Playlist">
-------------------------------------------------------------------------------------------------
<summary>	Playlist. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.PlaylistEventHandler">
-------------------------------------------------------------------------------------------------
<summary>	Delegate for handling Playlist events. </summary><remarks>	Chris Brandhorst, 17.05.2013. </remarks><param name="sender">	[in,out] If non-null, the sender. </param><param name="e">	 	[in,out] If non-null, the PlaylistEventArgs to process. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.ArtistBrowse.op_Inequality(SpotiFire.ArtistBrowse,SpotiFire.ArtistBrowse)">
-----------------------------------------------------------------------------------------------
<summary>	Checks if the given artistbrowse objects should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The artistbrowse object on the left-hand side of the operator. </param><param name="right">	The artistbrowse object on the right-hand side of the operator. </param><returns>	true if the given artistbrowse objects are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.ArtistBrowse.op_Equality(SpotiFire.ArtistBrowse,SpotiFire.ArtistBrowse)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given artistbrowse objects should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The artistbrowse object on the left-hand side of the operator. </param><param name="right">	The artistbrowse object on the right-hand side of the operator. </param><returns>	true if the given artistbrowse objects are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.ArtistBrowse.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this artistbrowse object is considered to be the same as the given
			object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the artistbrowse object, otherwise
			false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.ArtistBrowse.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this artistbrowse object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ArtistBrowse.Biography">
-------------------------------------------------------------------------------------------------
<summary>	Gets the biography. </summary><value>	The biography. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ArtistBrowse.SimilarArtists">
-------------------------------------------------------------------------------------------------
<summary>	Gets a list of similar artists. </summary><value>	The similar artists. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ArtistBrowse.Albums">
-------------------------------------------------------------------------------------------------
<summary>	Gets the albums. </summary><value>	The albums. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ArtistBrowse.Tracks">
-------------------------------------------------------------------------------------------------
<summary>	Gets the tracks. </summary><value>	The tracks. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ArtistBrowse.PortraitIds">
-------------------------------------------------------------------------------------------------
<summary>	Gets a list of identifiers of the portraits. </summary><value>	A list of identifiers of the portraits. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ArtistBrowse.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is loaded. </summary><value>	true if this object is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ArtistBrowse.Artist">
-------------------------------------------------------------------------------------------------
<summary>	Gets the artist. </summary><value>	The artist. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ArtistBrowse.Error">
-------------------------------------------------------------------------------------------------
<summary>	Gets the error. </summary><value>	The error. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ArtistBrowse.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.ArtistBrowse">
-------------------------------------------------------------------------------------------------
<summary>	Artist browse. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.ArtistBrowseEventHandler">
-------------------------------------------------------------------------------------------------
<summary>	Delegate for handling ArtistBrowse events. </summary><remarks>	Aleksander, 03.02.2013. </remarks><param name="sender">	The sender. </param><param name="e">	 	The EventArgs ^ to process. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Artist.op_Inequality(SpotiFire.Artist,SpotiFire.Artist)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given artists should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The artist on the left-hand side of the operator. </param><param name="right">	The artist on the right-hand side of the operator. </param><returns>	true if the given artists are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Artist.op_Equality(SpotiFire.Artist,SpotiFire.Artist)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given artists should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The artist on the left-hand side of the operator. </param><param name="right">	The artist on the right-hand side of the operator. </param><returns>	true if the given artists are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Artist.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this artist is considered to be the same as the given object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the artist, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Artist.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this artist. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Artist.GetLink">
-------------------------------------------------------------------------------------------------
<summary>   Create a <see cref="!:SpotiFire.Link" /> object representing the artist. </summary><remarks>   You need to Dispose the <see cref="!:SpotiFire.Link" /> object when you are done with
			it. </remarks><returns>	A <see cref="!:SpotiFire.Link" /> object representing this artist. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Artist.Browse(SpotiFire.ArtistBrowseType)">
-------------------------------------------------------------------------------------------------
<summary>	Browses the given artist. </summary><remarks>	Aleksander, 03.02.2013. </remarks><param name="type">	The type of artistbrowse to fetch. </param><returns>	The newly created albumbrowse. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Artist.Name">
-------------------------------------------------------------------------------------------------
<summary>	Gets the name. </summary><value>	The name. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Artist.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is loaded. </summary><value>	true if this object is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Artist.IsReady">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is ready. </summary><value>	true if this object is ready, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Artist.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Artist">
-------------------------------------------------------------------------------------------------
<summary>	Artist. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.AlbumBrowse.op_Inequality(SpotiFire.AlbumBrowse,SpotiFire.AlbumBrowse)">
-----------------------------------------------------------------------------------------------
<summary>	Checks if the given albumbrowse objects should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The albumbrowse object on the left-hand side of the operator. </param><param name="right">	The albumbrowse object on the right-hand side of the operator. </param><returns>	true if the given albumbrowse objects are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.AlbumBrowse.op_Equality(SpotiFire.AlbumBrowse,SpotiFire.AlbumBrowse)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given albumbrowse objects should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The albumbrowse object on the left-hand side of the operator. </param><param name="right">	The albumbrowse object on the right-hand side of the operator. </param><returns>	true if the given albumbrowse objects are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.AlbumBrowse.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this albumbrowse object is considered to be the same as the given
			object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the albumbrowse object, otherwise
			false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.AlbumBrowse.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this albumbrowse object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.AlbumBrowse.Review">
-------------------------------------------------------------------------------------------------
<summary>	Gets the review. </summary><value>	The review. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.AlbumBrowse.Tracks">
-------------------------------------------------------------------------------------------------
<summary>	Gets the tracks. </summary><value>	The tracks. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.AlbumBrowse.Copyrights">
-------------------------------------------------------------------------------------------------
<summary>	Gets the copyrights. </summary><value>	The copyrights. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.AlbumBrowse.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is completed. </summary><value>	true if this object is completed, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.AlbumBrowse.Artist">
-------------------------------------------------------------------------------------------------
<summary>	Gets the artist. </summary><value>	The artist. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.AlbumBrowse.Album">
-------------------------------------------------------------------------------------------------
<summary>	Gets the album. </summary><value>	The album. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.AlbumBrowse.Error">
-------------------------------------------------------------------------------------------------
<summary>	Gets the error. </summary><value>	The error. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.AlbumBrowse.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.AlbumBrowse">
-------------------------------------------------------------------------------------------------
<summary>	Album browse. </summary><remarks>	Aleksander, 30.01.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.AlbumBrowseEventHandler">
-------------------------------------------------------------------------------------------------
<summary>	Delegate for handling AlbumBrowse events. </summary><remarks>	Aleksander, 03.02.2013. </remarks><param name="sender">	The sender. </param><param name="e">	 	The EventArgs to process. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Album.op_Inequality(SpotiFire.Album,SpotiFire.Album)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given albums should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The album on the left-hand side of the operator. </param><param name="right">	The album on the right-hand side of the operator. </param><returns>	true if the given albums are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Album.op_Equality(SpotiFire.Album,SpotiFire.Album)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given albums should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The album on the left-hand side of the operator. </param><param name="right">	The album on the right-hand side of the operator. </param><returns>	true if the given albums are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Album.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this album is considered to be the same as the given object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the album, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Album.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this album. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Album.GetLink">
-------------------------------------------------------------------------------------------------
<summary>   Create a <see cref="!:SpotiFire.Link" /> object representing the album. </summary><remarks>   You need to Dispose the <see cref="!:SpotiFire.Link" /> object when you are done with
			it. </remarks><returns>	A <see cref="!:SpotiFire.Link" /> object representing this album. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Album.GetCover(SpotiFire.ImageSize)">
-------------------------------------------------------------------------------------------------
<summary>	Gets the identifier of the cover with the specified size. </summary><seealso cref="M:SpotiFire.Image.FromId(SpotiFire.Session,SpotiFire.PortraitId)" /><returns>	The identifier of the cover. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Album.Browse">
-------------------------------------------------------------------------------------------------
<summary>	Creates a <see cref="T:SpotiFire.AlbumBrowse" /> that can be used to gain additional
			info of the album. </summary><remarks>	Aleksander, 30.01.2013. </remarks><returns>	null if it fails, else. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Album.Year">
-------------------------------------------------------------------------------------------------
<summary>	Gets the year of release. </summary><value>	The year of release. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Album.Type">
-------------------------------------------------------------------------------------------------
<summary>	Gets the type of album. </summary><value>	The type. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Album.Name">
-------------------------------------------------------------------------------------------------
<summary>	Gets the name of the album. </summary><value>	The name of the album. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Album.IsAvailable">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this album is available for playback. </summary><value>	true if this album is available for playback, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Album.CoverId">
-------------------------------------------------------------------------------------------------
<summary>	Gets the identifier of the cover. </summary><seealso cref="M:SpotiFire.Image.FromId(SpotiFire.Session,SpotiFire.PortraitId)" /><value>	The identifier of the cover. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Album.Artist">
-------------------------------------------------------------------------------------------------
<summary>	Gets the artist. </summary><value>	The artist. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Album.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this album is loaded. </summary><value>	true if this album is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Album.IsReady">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this album is ready. </summary><value>	true if this album is ready, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Album.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Album">
-------------------------------------------------------------------------------------------------
<summary>	A spotify album. </summary><remarks>	Aleksander, 30.01.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Image.op_Inequality(SpotiFire.Image,SpotiFire.Image)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given images should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The image on the left-hand side of the operator. </param><param name="right">	The image on the right-hand side of the operator. </param><returns>	true if the given images are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Image.op_Equality(SpotiFire.Image,SpotiFire.Image)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given images should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The image on the left-hand side of the operator. </param><param name="right">	The image on the right-hand side of the operator. </param><returns>	true if the given images are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Image.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this image is considered to be the same as the given object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the image, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Image.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this image. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Image.GetLink">
-------------------------------------------------------------------------------------------------
<summary>   Create a <see cref="!:SpotiFire.Link" /> object representing the image. </summary><remarks>   You need to Dispose the <see cref="!:SpotiFire.Link" /> object when you are done with
			it. </remarks><returns>	A <see cref="!:SpotiFire.Link" /> object representing this image. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Image.FromId(SpotiFire.Session,SpotiFire.PortraitId)">
-------------------------------------------------------------------------------------------------
<summary>	Get's an image from an image-id. </summary><remarks>	Aleksander, 30.01.2013. </remarks><param name="session">	The spotify session. </param><param name="id">	  	The image identifier. </param><returns>	Returns an image from the given Id. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Image.GetImage">
-------------------------------------------------------------------------------------------------
<summary>	Gets the image. </summary><remarks>	Aleksander, 30.01.2013. </remarks><returns>	null if it fails, else the image. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Image.Format">
-------------------------------------------------------------------------------------------------
<summary>	Gets the image format. </summary><value>	The format. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Image.Error">
-------------------------------------------------------------------------------------------------
<summary>	Gets the error (if any). </summary><value>	The error. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Image.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this image is loaded. </summary><value>	true if this image is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Image.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Image">
-------------------------------------------------------------------------------------------------
<summary>	Image. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.ImageEventHandler">
-------------------------------------------------------------------------------------------------
<summary>	Delegate for handling Image events. </summary><remarks>	Aleksander, 30.01.2013. </remarks><param name="sender">	[in,out] If non-null, the sender. </param><param name="e">	 	[in,out] If non-null, the EventArgs ^ to process. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.PrivateSessionModeChanged">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in PrivateSessionModeChanged events.
			</summary><remarks>	Called when there is a change in the private session mode. </remarks><remarks>	The PrivateSessionModeChanged event provides a way for applications to be notified
			whenever a change in the private session mode has occured. Actions that can be
			taken after this are for instance notifying the user about this change. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.ScrobbleError">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in ScrobbleError events.
			</summary><remarks>	Called when there is a scrobble error event. </remarks><remarks>	The ScrobbleError event provides a way for applications to be notified
			whenever a scrobble error has occured. Actions that can be taken after this are
			for instance notifying the user about this change. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.ConnectionstateUpdated">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in ConnectionstateUpdated events.
			</summary><remarks>	Called when the connection state has updated - such as when logging in, going
			offline, etc. </remarks><remarks>	The ConnectionstateUpdated event provides a way for applications to be notified
			whenever the connection status of the Session has been updated. Actions that can
			be taken after this are for instance notifying the client and automatically
			trying to login again. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.CredentialsBlobUpdated">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in CredentialsBlobUpdated events. </summary><remarks>	Called when storable credentials have been updated. </remarks><remarks>	The CredentialsBlobUpdated event provides a way for applications to be notified
			whenever the storable credentials have been updated, which usually happens when a
			connection to the AP has been established. Actionstaken after this are for
			instance storing the blob on disk. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.OfflineStatusUpdated">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in OfflineStatusUpdated events. </summary><remarks>	Called when offline synchronization status is updated. </remarks><remarks>	The OfflineStatusUpdated event provides a way for applications to be notified
			whenever the offline synchronisation error status is updated. Actions that can be
			taken after this are for instance notifying the user of which tracks are currently
			available offline. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.OfflineError">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in OfflineError events. </summary><remarks>	Called when an offline synchronization error has occured. </remarks><remarks>	The OfflineError event provides a way for applications to be notified
			whenever an offline synchronisation error has occured. Actions that can be taken
			after this are for instance notifying the user of any synchronisation errors.
			</remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.GetAudioBufferStats">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in GetAudioBufferStats events. </summary><remarks>	Called to query application about its audio buffer. </remarks><remarks>	The GetAudioBufferStats event provides a way for applications to inform libspotify
			about the audio buffer of the application. Event-listeners on this
			GetAudioBufferStats <strong>must not</strong> (ever) block. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.StopPlayback">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in StopPlayback events. </summary><remarks>	Called when audio playback should stop. </remarks><remarks>	The StartPlayback event provides a way for applications to be notified
			whenever audio playback should stop. For this to work correctly the application
			must also implement GetAudioBufferStats. Event-listeners on this StopPlayback
			<strong>must not</strong> (ever) block. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.StartPlayback">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in StartPlayback events. </summary><remarks>	Called when audio playback should start. </remarks><remarks>	The StartPlayback event provides a way for applications to be notified
			whenever audio playback should start. For this to work correctly the application
			must also implement GetAudioBufferStats. Event-listeners on this StartPlayback
			<strong>must not</strong> (ever) block. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.UserinfoUpdated">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in UserinfoUpdated events. </summary><remarks>	Called after user info (anything related to sp_user objects) have been updated.
			</remarks><remarks>	The UserinfoUpdated event provides a way for applications to be notified
			whenever a modification of the user object has occured. Actions that can be taken
			after this are for instance updating the info on the user page of the application.
			</remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.StreamingError">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in StreamingError events. </summary><remarks>	Called when streaming cannot start or continue. </remarks><remarks>	The StreamingError event provides a way for applications to be notified
			whenever a streaming error has occured. Actions that can be taken after this are
			for instance trying to stream again, or notifying the user of the error.
			</remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.EndOfTrack">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in EndOfTrack events. </summary><remarks>	The EndOfTrack event provides a way for applications to be notified whenever
			a track has finished playing. Actions that can be taken after this are for
			instance playing another track, or exiting the application. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.LogMessage">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in LogMessage events. </summary><remarks>	The LogMessage event provides a way for applications to be notified whenever
			libspotify requests some log data to be logged. The application may log the given
			data. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.PlayTokenLost">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in PlayTokenLost events. </summary><remarks>	The PlayTokenLost event provides a way for applications to be notified whenever
			the spotify playtoken is lost. The spotify playtoken is a way for spotify
			to make sure that the same account only plays music at one place at a time
			(to prevent "sharing" of accounts). The playtoken is lost when the same user
			starts to play music on another machine (or another application on the same
			machine). </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.MusicDelivered">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in MusicDelivered events. </summary><remarks>	Event-listeners on this MusicDelivered <strong>must not</strong> (ever) block.
			They should simply take the samples delivered, and queue them for playback,
			and then return the number of frames that were queued. SpotiFire (and libspotify)
			will stop working if any listeners on the MusicDelivered event blocks. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.MessageToUser">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in MessageToUser events. </summary><remarks>	Called when the access point wants to display a message to the user. </remarks><remarks>	The MessageToUser event provides a way for applications to be notified
			whenever a message should be displayed to the user. Actions that can be taken
			after this are for instance notifying the client of the message. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.ConnectionError">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in ConnectionError events. </summary><remarks>	Called when a connection error has occured. </remarks><remarks>	The ConnectionError event provides a way for applications to be notified
			whenever a connection error has occured. Actions that can be taken after this are
			for instance notifying the client and automatically trying to login again.
			</remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Session.MetadataUpdated">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in MetadataUpdated events. </summary><remarks>	The MetadataUpdated event provides a way for applications to be notified whenever
			metadata has been updated. If you have metadata cached outside of libspotify, you
			should purge your caches and fetch new versions. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.op_Inequality(SpotiFire.Session,SpotiFire.Session)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given sessions should not be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The session on the left-hand side of the operator. </param><param name="right">	The session on the right-hand side of the operator. </param><returns>	true if the given sessions are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.op_Equality(SpotiFire.Session,SpotiFire.Session)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given sessions should be considered equal. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="left">	The session on the left-hand side of the operator. </param><param name="right">	The session on the right-hand side of the operator. </param><returns>	true if the given sessions are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this session is considered to be the same as the given object. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the session, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this session. </summary><remarks>	Chris Brandhorst, 16.05.2013. </remarks><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.CacheSize">
-------------------------------------------------------------------------------------------------
<summary>	Set maximum cache size. </summary><value>	Maximum cache size in megabytes. Setting it to 0 (the default) will let libspotify automatically resize the cache (10% of disk free space). </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.UserCountryCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the country code of the current user. </summary><value>	The users country code as determined by libspotify. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.UserCountry">
-------------------------------------------------------------------------------------------------
<summary>	Gets the country of the current user as string. </summary><value>	The users country as determined by libspotify. </value><example> "SE" </example>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.RememberedUser">
-------------------------------------------------------------------------------------------------
<summary>	Gets the remembered user. </summary><value>	The remembered user. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.UserName">
-------------------------------------------------------------------------------------------------
<summary>	Gets the name of the user. </summary><value>	The name of the user. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.PrivateSession">
-------------------------------------------------------------------------------------------------
<summary>	Gets or sets a value indicating whether the private session. </summary><value>	true if private session, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.VolumeNormalization">
-------------------------------------------------------------------------------------------------
<summary>	Gets or sets a value indicating whether to use volume normalization. </summary><value>	true if volume normalization is on, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.PreferredOfflineBitrate">
-------------------------------------------------------------------------------------------------
<summary>	Sets the preferred offline bitrate. </summary><value>	The preferred offline bitrate. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.PreferredBitrate">
-------------------------------------------------------------------------------------------------
<summary>	Sets the preferred bitrate. </summary><value>	The preferred bitrate. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.Starred">
-------------------------------------------------------------------------------------------------
<summary>	Gets the starred playlist. </summary><value>	The starred playlist for the currently signed in user. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.PlaylistContainer">
-------------------------------------------------------------------------------------------------
<summary>	Gets the playlist container. </summary><value>	The playlist container for the currently signed in user. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.PlayerPrefetch(SpotiFire.Track)">
-------------------------------------------------------------------------------------------------
<summary>	Prefetch a track. </summary><remarks>	Instruct libspotify to start loading of a track into its cache. This could be done by an application just before the current track ends. </remarks><param name="track">	The track to be prefetched. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.PlayerUnload">
-------------------------------------------------------------------------------------------------
<summary>	Unload the currently loaded track. </summary><exception cref="T:SpotiFire.SpotifyException">Thrown on error.</exception><remarks>	Aleksander, 30.01.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.PlayerSeek(System.TimeSpan)">
-------------------------------------------------------------------------------------------------
<summary>	Seeks to a given position in the loaded track. </summary><remarks>	Aleksander, 30.01.2013. </remarks><exception cref="T:SpotiFire.SpotifyException">Thrown on error.</exception><param name="offset">	The offset from the start of the track. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.PlayerSeek(System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>	Seeks to a given position in the loaded track. </summary><remarks>	Aleksander, 30.01.2013. </remarks><exception cref="T:SpotiFire.SpotifyException">Thrown on error.</exception><param name="offset">	The offset (in milliseconds) from the start of the track. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.PlayerPlay">
-------------------------------------------------------------------------------------------------
<summary>	Starts playback of the currently loaded track. </summary><exception cref="T:SpotiFire.SpotifyException">Thrown on error.</exception><remarks>	Aleksander, 30.01.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.PlayerPause">
-------------------------------------------------------------------------------------------------
<summary>	Pauses the currently playing track. </summary><exception cref="T:SpotiFire.SpotifyException">Thrown on error.</exception><remarks>	Aleksander, 30.01.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.PlayerLoad(SpotiFire.Track)">
-------------------------------------------------------------------------------------------------
<summary>	Loads the specified track. </summary><remarks>	Aleksander, 30.01.2013. </remarks><exception cref="T:SpotiFire.SpotifyException">Thrown on error.</exception><param name="track">	The track to be loaded. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.GetLink(System.String)">
-------------------------------------------------------------------------------------------------
<summary>	Get a link from an externally provided text ID.  </summary><remarks>	Brian Collins, 08.11.2015. </remarks><remarks>	This allows inter-working with the web API. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.FlushCaches">
-------------------------------------------------------------------------------------------------
<summary>	Flushes the caches.  </summary><remarks>	This will make libspotify write all data that is meant to be stored on disk to the disk immediately. libspotify does this periodically by itself and also on logout. So under normal conditions this should never need to be used. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.ForgetMe">
-------------------------------------------------------------------------------------------------
<summary>	Forget me. </summary><remarks>	Aleksander, 24.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.Logout">
-------------------------------------------------------------------------------------------------
<summary>	Logs out the currently logged in user. Allwasy call this before terminating the application,
			otherwise, settings and cache may be lost. </summary><remarks>	Aleksander, 30.01.2013. </remarks><seealso cref="M:SpotiFire.Session.Login(System.String,System.String,System.Boolean)" /><seealso cref="M:SpotiFire.Session.Relogin" /><returns>	The pending logout-task. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.Relogin">
-------------------------------------------------------------------------------------------------
<summary>	Logs the user back in. </summary><remarks>	Aleksander, 30.01.2013. </remarks><seealso cref="M:SpotiFire.Session.Login(System.String,System.String,System.Boolean)" /><seealso cref="M:SpotiFire.Session.Logout" />
										///
<returns>	The pending login-task. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.Login(System.String,System.String)">
-------------------------------------------------------------------------------------------------
<summary>	Logs in the specified username/credentials blob combo. This initiates the login in the
			background. An application MUST NEVER store the user's password in clear text. If automatic
			relogin is required, use <see cref="M:SpotiFire.Session.Relogin" />. When logging in using the credentials blob,
			the credentials are always remembered. </summary><remarks>	Chris Brandhorst, 16.11.2013. </remarks><param name="username">	The username to log in. </param><param name="password">	The credentials blob for the specified username. </param><seealso cref="M:SpotiFire.Session.Relogin" /><seealso cref="M:SpotiFire.Session.Logout" /><returns>	The pending login-task. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.Session.Login(System.String,System.String,System.Boolean)">
-------------------------------------------------------------------------------------------------
<summary>	Logs in the specified username/password combo. This initiates the login in the background.
			An application MUST NEVER store the user's password in clear text. If automatic relogin is
			required, use <see cref="M:SpotiFire.Session.Relogin" />. </summary><remarks>	Aleksander, 30.01.2013. </remarks><param name="username">	The username to log in. </param><param name="password">	The password for the specified username. </param><param name="remember">	If true, the username / password will be remembered. </param><seealso cref="M:SpotiFire.Session.Relogin" /><seealso cref="M:SpotiFire.Session.Logout" /><returns>	The pending login-task. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.ConnectionRules">
-------------------------------------------------------------------------------------------------
<summary>	Sets the connection rules. </summary><value>	The connection rules. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.ConnectionType">
-------------------------------------------------------------------------------------------------
<summary>	Sets the type of the connection. </summary><value>	The type of the connection. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.Session.ConnectionState">
-------------------------------------------------------------------------------------------------
<summary>	Gets the state of the connection. </summary><value>	The connection state. <see cref="T:SpotiFire.ConnectionState" /> for possible values. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Session">
-------------------------------------------------------------------------------------------------
<summary>	The main Spotify object. Used to communicate with Spotify's server, and playing music, amongst other things. </summary><remarks>	Aleksander, 30.01.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.PrivateSessionModeEventHandler">
-------------------------------------------------------------------------------------------------
<summary>	Delegate for handling PrivateSessionMode events. </summary><remarks>	Chris Brandhorst, 12.05.2013. </remarks><param name="sender">	[in,out] If non-null, the sender. </param><param name="e">	 	[in,out] If non-null, the PrivateSessionModeEventArgs to process.
						</param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.AudioBufferStatsEventHandler">
-------------------------------------------------------------------------------------------------
<summary>	Delegate for handling AudioBufferStats events. </summary><remarks>	Chris Brandhorst, 12.05.2013. </remarks><param name="sender">	[in,out] If non-null, the sender. </param><param name="e">	 	[in,out] If non-null, the AudioBufferStatsEventArgs to process. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.MusicDeliveryEventHandler">
-------------------------------------------------------------------------------------------------
<summary>	Delegate for handling MusicDelivery events. </summary><remarks>	Aleksander, 30.01.2013. </remarks><param name="sender">	[in,out] If non-null, the sender. </param><param name="e">	 	[in,out] If non-null, the MusicDeliveryEventArgs to process. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.SessionEventHandler">
-------------------------------------------------------------------------------------------------
<summary>	Delegate for handling Session events. </summary><remarks>	Aleksander, 30.01.2013. </remarks><param name="sender">	[in,out] If non-null, the sender. </param><param name="e">	 	[in,out] If non-null, the SessionEventArgs to process. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PortraitId.op_Inequality(SpotiFire.PortraitId,SpotiFire.PortraitId)">
-----------------------------------------------------------------------------------------------
<summary>	Checks if the given artistbrowse objects should not be considered equal. </summary><param name="left">	The artistbrowse object on the left-hand side of the operator. </param><param name="right">	The artistbrowse object on the right-hand side of the operator. </param><returns>	true if the given artistbrowse objects are not equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PortraitId.op_Equality(SpotiFire.PortraitId,SpotiFire.PortraitId)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if the given artistbrowse objects should be considered equal. </summary><param name="left">	The artistbrowse object on the left-hand side of the operator. </param><param name="right">	The artistbrowse object on the right-hand side of the operator. </param><returns>	true if the given artistbrowse objects are equal, otherwise false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PortraitId.Equals(SpotiFire.PortraitId)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this artistbrowse object is considered to be the same as the given
			object. </summary><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the artistbrowse object, otherwise
			false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PortraitId.Equals(System.Object)">
-------------------------------------------------------------------------------------------------
<summary>	Checks if this artistbrowse object is considered to be the same as the given
			object. </summary><param name="other">	The object to compare. </param><returns>	true if the given object is equal to the artistbrowse object, otherwise
			false. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PortraitId.GetHashCode">
-------------------------------------------------------------------------------------------------
<summary>	Gets the hash code for this artistbrowse object. </summary><returns>	The hash code. </returns>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.PlaylistEventArgs.UpdateComplete">
-------------------------------------------------------------------------------------------------
<summary>	Gets whether this event was caused by the completion of an update. </summary><value>	Whether an update was completed. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.PlaylistEventArgs.TrackPosition">
-------------------------------------------------------------------------------------------------
<summary>	Gets the track position relevant for this event. </summary><value>	The track position. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PlaylistEventArgs.#ctor(System.Boolean)">
-------------------------------------------------------------------------------------------------
<summary>	Constructor that takes the update done flag. </summary><remarks>	Chris Brandhorst, 20.05.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PlaylistEventArgs.#ctor(System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>	Constructor that takes the position of a track. </summary><remarks>	Chris Brandhorst, 20.05.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PlaylistEventArgs.#ctor">
-------------------------------------------------------------------------------------------------
<summary>	Default constructor. </summary><remarks>	Chris Brandhorst, 17.05.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.PlaylistEventArgs">
-------------------------------------------------------------------------------------------------
<summary>	Additional information for private session mode events. </summary><remarks>	Chris Brandhorst, 17.05.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.PrivateSessionModeEventArgs.Private">
-------------------------------------------------------------------------------------------------
<summary>	Gets the state of the private session. </summary><value>	The state. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.PrivateSessionModeEventArgs.#ctor(System.Boolean)">
-------------------------------------------------------------------------------------------------
<summary>	Constructor that takes the state of the private session. </summary><remarks>	Chris Brandhorst, 12.05.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.PrivateSessionModeEventArgs">
-------------------------------------------------------------------------------------------------
<summary>	Additional information for private session mode events. </summary><remarks>	Chris Brandhorst, 12.05.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.AudioBufferStatsEventArgs.Stutters">
-------------------------------------------------------------------------------------------------
<summary>	Gets or sets the number of stutters (audio dropouts) since last query. </summary><value>	The number of stutters. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.AudioBufferStatsEventArgs.Samples">
-------------------------------------------------------------------------------------------------
<summary>	Gets or sets the number of samples in buffer. </summary><value>	The number of samples in buffer. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.AudioBufferStatsEventArgs.#ctor">
-------------------------------------------------------------------------------------------------
<summary>	Default constructor. </summary><remarks>	Chris Brandhorst, 12.05.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.AudioBufferStatsEventArgs">
-------------------------------------------------------------------------------------------------
<summary>	Additional information for audio buffer stats events. </summary><remarks>	Chris Brandhorst, 12.05.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.MusicDeliveryEventArgs.Samples">
-------------------------------------------------------------------------------------------------
<summary>	Gets the samples. </summary><value>	The samples. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.MusicDeliveryEventArgs.Rate">
-------------------------------------------------------------------------------------------------
<summary>	Gets the rate. </summary><value>	The rate. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.MusicDeliveryEventArgs.Channels">
-------------------------------------------------------------------------------------------------
<summary>	Gets the channels. </summary><value>	The channels. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.MusicDeliveryEventArgs.Frames">
-------------------------------------------------------------------------------------------------
<summary>	Gets the frames. </summary><value>	The frames. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.MusicDeliveryEventArgs.ConsumedFrames">
-------------------------------------------------------------------------------------------------
<summary>	Gets or sets the number of consumed frames. </summary><value>	The number of consumed frames. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.MusicDeliveryEventArgs.#ctor(System.Int32,System.Int32,System.Byte[],System.Int32)">
-------------------------------------------------------------------------------------------------
<summary>	Constructor. </summary><remarks>	Aleksander, 03.02.2013. </remarks><param name="channels">	The channels. </param><param name="rate">	   	The rate. </param><param name="samples"> 	If non-null, the samples. </param><param name="frames">  	The frames. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.MusicDeliveryEventArgs">
-------------------------------------------------------------------------------------------------
<summary>	Additional information for music delivery events. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.SessionEventArgs.Error">
-------------------------------------------------------------------------------------------------
<summary>	Gets the error. </summary><value>	The error. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.SessionEventArgs.Message">
-------------------------------------------------------------------------------------------------
<summary>	Gets the message. </summary><value>	The message. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.SessionEventArgs.#ctor(SpotiFire.Error)">
-------------------------------------------------------------------------------------------------
<summary>	Constructor that takes an error. </summary><remarks>	Aleksander, 03.02.2013. </remarks><param name="error">	The error. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.SessionEventArgs.#ctor(System.String)">
-------------------------------------------------------------------------------------------------
<summary>	Constructor that takes a message. </summary><remarks>	Aleksander, 03.02.2013. </remarks><param name="message">	The message. </param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="M:SpotiFire.SessionEventArgs.#ctor">
-------------------------------------------------------------------------------------------------
<summary>	Default constructor. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.SessionEventArgs">
-------------------------------------------------------------------------------------------------
<summary>	Additional information for session events. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Collections.ObservableSPList`1">
-------------------------------------------------------------------------------------------------
<summary>	Abstract class used by SpotiFire lists which are . </summary><remarks>	Chris Brandhorst, 17.05.2013. </remarks><remarks>	This class uses the .NET NotifyCollectionChangedEventHandler for communicating
			changes to the list. Also, it enables raising of the CollectionChanged event from
			outside this class. This abstract class should be used by SpotiFire classes for
			internal list members. </remarks>	
-------------------------------------------------------------------------------------------------
</member>
    <member name="E:SpotiFire.Collections.IObservableSPList`1.CollectionChanged">
-------------------------------------------------------------------------------------------------
<summary>	Event queue for all listeners interested in CollectionChanged events.
			</summary><remarks>	Called when there is a change in the collection. </remarks><remarks>	The CollectionChanged event provides a way for applications to be notified
			whenever a change in the collection has occured. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Collections.IObservableSPList`1">
-------------------------------------------------------------------------------------------------
<summary>	Interface for Spotify lists which can be observed. </summary><remarks>	Chris Brandhorst, 17.05.2013. </remarks><remarks>	This interface uses the .NET NotifyCollectionChangedEventHandler for communicating
			changes to the list. This interface should be used by SpotiFire classes for
			public observable list members. </remarks>	
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.Collections.NotifyCollectionChangedEventHandler">
-------------------------------------------------------------------------------------------------
<summary>	Delegate for handling CollectionChanged events. </summary><remarks>	Chris Brandhorst, 17.05.2013. </remarks><param name="sender">	[in,out] If non-null, the sender. </param><param name="e">	 	[in,out] If non-null, the NotifyCollectionChangedEventArgs to process.
			</param>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.ISpotifyAwaitable`1">
-------------------------------------------------------------------------------------------------
<summary>	Interface for all awaitable spotify-types. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.IAsyncLoaded.IsReady">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is ready. </summary><value>	true if this object is ready, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.IAsyncLoaded.IsLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Gets a value indicating whether this object is loaded. </summary><value>	true if this object is loaded, false if not. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.IAsyncLoaded">
-------------------------------------------------------------------------------------------------
<summary>	Interface for all async loaded spotify-types that do not signal their completion. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.ISpotifyObject.Session">
-------------------------------------------------------------------------------------------------
<summary>	Gets the session. </summary><value>	The session. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.ISpotifyObject">
-------------------------------------------------------------------------------------------------
<summary>	Interface for all spotify-objects. </summary><remarks>	Aleksander, 03.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.NotLoadedException">
-------------------------------------------------------------------------------------------------
<summary>	Exception for signalling not loaded errors. </summary><remarks>	Aleksander, 02.06.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.SpotifyException.Error">
-------------------------------------------------------------------------------------------------
<summary>	Gets the error. </summary><value>	The error. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="P:SpotiFire.SpotifyException.Message">
-------------------------------------------------------------------------------------------------
<summary>	Gets the message. </summary><value>	The message. </value>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.SpotifyException">
-------------------------------------------------------------------------------------------------
<summary>	Exception for signalling spotify errors. </summary><remarks>	Aleksander, 30.01.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.ToplistRegion">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent toplist region. </summary><remarks>	Aleksander, 09.05.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.ToplistRegion.User">
      <summary>	Toplist for a given user. </summary>
    </member>
    <member name="F:SpotiFire.ToplistRegion.Everywhere">
      <summary>	Global toplist. </summary>
    </member>
    <member name="T:SpotiFire.ToplistType">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent toplist types. </summary><remarks>	Aleksander, 09.05.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.ToplistType.Tracks">
      <summary>	An enum constant representing the tracks option. </summary>
    </member>
    <member name="F:SpotiFire.ToplistType.Albums">
      <summary>	An enum constant representing the albums option. </summary>
    </member>
    <member name="F:SpotiFire.ToplistType.Artists">
      <summary>	An enum constant representing the artists option. </summary>
    </member>
    <member name="T:SpotiFire.ScrobblingState">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent scrobbing states. </summary><remarks>	Aleksander, 24.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.SocialProvider">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent a social provider. </summary><remarks>	Aleksander, 24.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.SocialProvider.LastFm">
      <summary>	An enum constant representing the last fm option. </summary>
    </member>
    <member name="F:SpotiFire.SocialProvider.Facebook">
      <summary>	An enum constant representing the facebook option. </summary>
    </member>
    <member name="F:SpotiFire.SocialProvider.Spotify">
      <summary>	An enum constant representing the spotify option. </summary>
    </member>
    <member name="T:SpotiFire.ConnectionRules">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent connection rules.  </summary><remarks>	Connection rules, bitwise OR of flags. The default is The default is Network | AllowSync. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.ConnectionRules.AllowSyncOverWifi">
      <summary>	An enum constant representing the allow synchronise over wifi option. </summary>
    </member>
    <member name="F:SpotiFire.ConnectionRules.AllowSyncOverMobile">
      <summary>	An enum constant representing the allow synchronise over mobile option. </summary>
    </member>
    <member name="F:SpotiFire.ConnectionRules.NetworkIfRoaming">
      <summary>	An enum constant representing the network if roaming option. </summary>
    </member>
    <member name="F:SpotiFire.ConnectionRules.Network">
      <summary>	An enum constant representing the network option. </summary>
    </member>
    <member name="F:SpotiFire.ConnectionRules.None">
      <summary>	An enum constant representing the none option. </summary>
    </member>
    <member name="T:SpotiFire.ConnectionType">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent a type of internet-connection. </summary><remarks>	Aleksander, 24.02.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.ConnectionType.Wired">
      <summary>	An enum constant representing the wired option. </summary>
    </member>
    <member name="F:SpotiFire.ConnectionType.Wifi">
      <summary>	An enum constant representing the wifi option. </summary>
    </member>
    <member name="F:SpotiFire.ConnectionType.MobileRoaming">
      <summary>	An enum constant representing the mobile roaming option. </summary>
    </member>
    <member name="F:SpotiFire.ConnectionType.Mobile">
      <summary>	An enum constant representing the mobile option. </summary>
    </member>
    <member name="F:SpotiFire.ConnectionType.None">
      <summary>	An enum constant representing the none option. </summary>
    </member>
    <member name="F:SpotiFire.ConnectionType.Unknown">
      <summary>	An enum constant representing the unknown option. </summary>
    </member>
    <member name="T:SpotiFire.ArtistBrowseType">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent type of artist-browse. </summary><remarks>	Aleksander, 29.01.2013. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.ArtistBrowseType.NoAlbums">
      <summary>	An enum constant representing the no albums option. </summary>
    </member>
    <member name="F:SpotiFire.ArtistBrowseType.NoTracks">
      <summary>	An enum constant representing the no tracks option. </summary>
    </member>
    <member name="F:SpotiFire.ArtistBrowseType.Full">
      <summary>	An enum constant representing the full option (depricated). </summary>
    </member>
    <member name="T:SpotiFire.SearchType">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent type of search. </summary><remarks>	Aleksander, 03.11.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.TrackAvailability">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent track availability. </summary><remarks>	Aleksander, 02.11.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.TrackAvailability.BannedByArtist">
      <summary>	Track not available on artist's request. </summary>
    </member>
    <member name="F:SpotiFire.TrackAvailability.NotStreamable">
      <summary>	Track can not be streamed using this account. </summary>
    </member>
    <member name="F:SpotiFire.TrackAvailability.Available">
      <summary>	Track is available and can be played. </summary>
    </member>
    <member name="F:SpotiFire.TrackAvailability.Unavailable">
      <summary>	Track is not available. </summary>
    </member>
    <member name="T:SpotiFire.PlaylistType">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent type of playlist. </summary><remarks>	Aleksander, 01.11.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="T:SpotiFire.OfflineStatus">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent offline status of a playlist. </summary><remarks>	Aleksander, 31.10.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.OfflineStatus.Waiting">
      <summary>	Playlist is queued for download. </summary>
    </member>
    <member name="F:SpotiFire.OfflineStatus.Downloading">
      <summary>	Playlist is currently downloading. Only one playlist can be in this state at any given time. </summary>
    </member>
    <member name="F:SpotiFire.OfflineStatus.Yes">
      <summary>	Playlist is synchronized to local storage. </summary>
    </member>
    <member name="F:SpotiFire.OfflineStatus.No">
      <summary>	Playlist is not offline enabled. </summary>
    </member>
    <member name="T:SpotiFire.ImageSize">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent the size of an image. </summary><remarks>	Aleksander, 31.10.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.ImageSize.Large">
      <summary>	An enum constant representing the large option. </summary>
    </member>
    <member name="F:SpotiFire.ImageSize.Small">
      <summary>	An enum constant representing the small option. </summary>
    </member>
    <member name="F:SpotiFire.ImageSize.Normal">
      <summary>	An enum constant representing the normal option. </summary>
    </member>
    <member name="T:SpotiFire.LinkType">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent link types. </summary><remarks>	Aleksander, 31.10.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.LinkType.Image">
      <summary>	An enum constant representing the image option. </summary>
    </member>
    <member name="F:SpotiFire.LinkType.Localtrack">
      <summary>	An enum constant representing the localtrack option. </summary>
    </member>
    <member name="F:SpotiFire.LinkType.Starred">
      <summary>	An enum constant representing the starred option. </summary>
    </member>
    <member name="F:SpotiFire.LinkType.Profile">
      <summary>	An enum constant representing the profile option. </summary>
    </member>
    <member name="F:SpotiFire.LinkType.Playlist">
      <summary>	An enum constant representing the playlist option. </summary>
    </member>
    <member name="F:SpotiFire.LinkType.Search">
      <summary>	An enum constant representing the search option. </summary>
    </member>
    <member name="F:SpotiFire.LinkType.Artist">
      <summary>	An enum constant representing the artist option. </summary>
    </member>
    <member name="F:SpotiFire.LinkType.Album">
      <summary>	An enum constant representing the album option. </summary>
    </member>
    <member name="F:SpotiFire.LinkType.Track">
      <summary>	An enum constant representing the track option. </summary>
    </member>
    <member name="F:SpotiFire.LinkType.Invalid">
      <summary>	Link type not valid - default until the library has parsed the link, or when parsing failed. </summary>
    </member>
    <member name="T:SpotiFire.ImageFormat">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent the format of an image. </summary><remarks>	Aleksander, 31.10.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.ImageFormat.Jpeg">
      <summary>	JPEG image. </summary>
    </member>
    <member name="F:SpotiFire.ImageFormat.Unknown">
      <summary>	Unknown image format. </summary>
    </member>
    <member name="T:SpotiFire.ConnectionState">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent a state of connection. </summary><remarks>	Aleksander, 20.10.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.ConnectionState.Offline">
      <summary>
Logged in in offline mode.
</summary>
    </member>
    <member name="F:SpotiFire.ConnectionState.Undefined">
      <summary>
The connection state is undefined.
</summary>
    </member>
    <member name="F:SpotiFire.ConnectionState.Disconnected">
      <summary>
Was logged in, but has now been disconnected.
</summary>
    </member>
    <member name="F:SpotiFire.ConnectionState.LoggedIn">
      <summary>
Logged in against a Spotify access point.
</summary>
    </member>
    <member name="F:SpotiFire.ConnectionState.LoggedOut">
      <summary>
User not yet logged in.
</summary>
    </member>
    <member name="T:SpotiFire.BitRate">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent different bitrates. </summary><remarks>	Aleksander, 20.10.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.BitRate.Bitrate96k">
      <summary>	Bitrate 96kbps. </summary>
    </member>
    <member name="F:SpotiFire.BitRate.Bitrate320k">
      <summary>	Bitrate 320kbps. </summary>
    </member>
    <member name="F:SpotiFire.BitRate.Bitrate160k">
      <summary>	Bitrate 160kbps. </summary>
    </member>
    <member name="T:SpotiFire.AlbumType">
-------------------------------------------------------------------------------------------------
<summary>	Values that represent album types. </summary><remarks>	Aleksander, 20.10.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.AlbumType.Unknown">
      <summary>	An enum constant representing the unknown option. </summary>
    </member>
    <member name="F:SpotiFire.AlbumType.Compilation">
      <summary>	An enum constant representing the compilation option. </summary>
    </member>
    <member name="F:SpotiFire.AlbumType.Single">
      <summary>	An enum constant representing the single option. </summary>
    </member>
    <member name="F:SpotiFire.AlbumType.Album">
      <summary>	An enum constant representing the album option. </summary>
    </member>
    <member name="T:SpotiFire.Error">
-------------------------------------------------------------------------------------------------
<summary>	Values that errors given from libspotify can have. </summary><remarks>	Aleksander, 19.10.2012. </remarks>
-------------------------------------------------------------------------------------------------
</member>
    <member name="F:SpotiFire.Error.SYSTEM_FAILURE">
      <summary>
An operating system error
</summary>
    </member>
    <member name="F:SpotiFire.Error.INVALID_ARGUMENT">
      <summary>
An invalid argument was specified
</summary>
    </member>
    <member name="F:SpotiFire.Error.LASTFM_AUTH_ERROR">
      <summary>
A LastFM scrobble authentication error has occurred
</summary>
    </member>
    <member name="F:SpotiFire.Error.OFFLINE_LICENSE_ERROR">
      <summary>
The Spotify license server does not respond correctly
</summary>
    </member>
    <member name="F:SpotiFire.Error.OFFLINE_LICENSE_LOST">
      <summary>
The license for this device has been lost. Most likely because the user used offline on three other device
</summary>
    </member>
    <member name="F:SpotiFire.Error.OFFLINE_NOT_ALLOWED">
      <summary>
This user is not allowed to use offline mode
</summary>
    </member>
    <member name="F:SpotiFire.Error.OFFLINE_EXPIRED">
      <summary>
Offline key has expired, the user needs to go online again
</summary>
    </member>
    <member name="F:SpotiFire.Error.OFFLINE_DISK_CACHE">
      <summary>
Disk cache is full so no more tracks can be downloaded to offline mode
</summary>
    </member>
    <member name="F:SpotiFire.Error.OFFLINE_TOO_MANY_TRACKS">
      <summary>
Reached the device limit for number of tracks to download
</summary>
    </member>
    <member name="F:SpotiFire.Error.APPLICATION_BANNED">
      <summary>
This application is no longer allowed to use the Spotify service
</summary>
    </member>
    <member name="F:SpotiFire.Error.CANT_OPEN_TRACE_FILE">
      <summary>
Unable to open trace file
</summary>
    </member>
    <member name="F:SpotiFire.Error.INVALID_DEVICE_ID">
      <summary>
Invalid device ID
</summary>
    </member>
    <member name="F:SpotiFire.Error.NETWORK_DISABLED">
      <summary>
Network disabled
</summary>
    </member>
    <member name="F:SpotiFire.Error.NO_CREDENTIALS">
      <summary>
No credentials are stored
</summary>
    </member>
    <member name="F:SpotiFire.Error.NO_SUCH_USER">
      <summary>
Requested user does not exist
</summary>
    </member>
    <member name="F:SpotiFire.Error.NO_CACHE">
      <summary>
Cache is not enabled
</summary>
    </member>
    <member name="F:SpotiFire.Error.INBOX_IS_FULL">
      <summary>
Target inbox is full
</summary>
    </member>
    <member name="F:SpotiFire.Error.PERMISSION_DENIED">
      <summary>
Requested operation is not allowed
</summary>
    </member>
    <member name="F:SpotiFire.Error.NO_STREAM_AVAILABLE">
      <summary>
Could not find any suitable stream to play
</summary>
    </member>
    <member name="F:SpotiFire.Error.IS_LOADING">
      <summary>
The resource is currently loading
</summary>
    </member>
    <member name="F:SpotiFire.Error.OTHER_TRANSIENT">
      <summary>
A transient error occurred.
</summary>
    </member>
    <member name="F:SpotiFire.Error.USER_NEEDS_PREMIUM">
      <summary>
The specified user needs a premium account
</summary>
    </member>
    <member name="F:SpotiFire.Error.INDEX_OUT_OF_RANGE">
      <summary>
Index out of range
</summary>
    </member>
    <member name="F:SpotiFire.Error.INVALID_INDATA">
      <summary>
Input data was either missing or invalid
</summary>
    </member>
    <member name="F:SpotiFire.Error.MISSING_CALLBACK">
      <summary>
No valid callback registered to handle events
</summary>
    </member>
    <member name="F:SpotiFire.Error.BAD_USER_AGENT">
      <summary>
The user agent string is invalid or too long
</summary>
    </member>
    <member name="F:SpotiFire.Error.OTHER_PERMANENT">
      <summary>
Some other error occurred, and it is permanent (e.g. trying to relogin will not help)
</summary>
    </member>
    <member name="F:SpotiFire.Error.CLIENT_TOO_OLD">
      <summary>
Client is too old, library will need to be updated
</summary>
    </member>
    <member name="F:SpotiFire.Error.UNABLE_TO_CONTACT_SERVER">
      <summary>
Cannot connect to the Spotify backend system
</summary>
    </member>
    <member name="F:SpotiFire.Error.USER_BANNED">
      <summary>
The specified username is banned
</summary>
    </member>
    <member name="F:SpotiFire.Error.BAD_USERNAME_OR_PASSWORD">
      <summary>
Login failed because of bad username and/or password
</summary>
    </member>
    <member name="F:SpotiFire.Error.BAD_APPLICATION_KEY">
      <summary>
The application key is invalid
</summary>
    </member>
    <member name="F:SpotiFire.Error.TRACK_NOT_PLAYABLE">
      <summary>
The track specified for playing cannot be played
</summary>
    </member>
    <member name="F:SpotiFire.Error.API_INITIALIZATION_FAILED">
      <summary>
Initialization of library failed - are cache locations etc. valid?
</summary>
    </member>
    <member name="F:SpotiFire.Error.BAD_API_VERSION">
      <summary>
The library version targeted does not match the one you claim you support
</summary>
    </member>
    <member name="F:SpotiFire.Error.OK">
      <summary>
No errors encountered
</summary>
    </member>
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <!-- Discarding badly formed XML document comment for member 'T:sp_session'. -->
    <!-- Discarding badly formed XML document comment for member 'F:sp_session_config.proxy'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_session_user_country(sp_session*)'. -->
    <!-- Discarding badly formed XML document comment for member 'M:sp_toplistbrowse_create(sp_session*,sp_toplisttype,sp_toplistregion,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(sp_toplistbrowse*,System.Void*),System.Void*)'. -->
    <member name="T:SpotiFire.AwaitHelper">
            -------------------------------------------------------------------------------------------------
             <summary>   Await helper. </summary><remarks>   Aleksander, 03.02.2013. </remarks>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="T:SpotiFire.PlayQueue">
            -------------------------------------------------------------------------------------------------
             <summary>   A spotify playqueue, mimicing the functionallity of the standard Play Queue in Spotify. </summary><remarks>   Aleksander, 18.02.2013. </remarks><example>
             Shuffle and play all the tracks from a single playlist:
             <code><code lang="cs"><![CDATA[
             static async Task PlayQueueTest()
             {
                Console.WriteLine("Enter username and password (a line for each)");
                Session session = await Spotify.CreateSession(key, cache, settings, userAgent);
                session.MusicDelivered += session_MusicDeliver;
            
                await session.Login(Console.ReadLine(), Console.ReadLine(), false);
                session.PrefferedBitrate = BitRate.Bitrate320k;
            
                await session.PlaylistContainer;
                while (session.PlaylistContainer.Playlists.Count < 1)
                {
                    Console.WriteLine("Found {0} playlists, retrying in 2 sec.", session.PlaylistContainer.Playlists.Count);
                    await Task.Delay(TimeSpan.FromSeconds(2));
                }
            
                AutoResetEvent are = new AutoResetEvent(false);
            
                PlayQueue queue = new PlayQueue();
                session.EndOfTrack += (s, e) =>
                {
                    if (!queue.IsEmpty)
                    {
                        var track = queue.Dequeue();
                        session.PlayerUnload();
                        session.PlayerLoad(track);
                        session.PlayerPlay();
                    }
                    else
                    {
                        are.Set();
                    }
                };
            
                var playlist = await session.PlaylistContainer.Playlists[0];
                queue.Seed = playlist.Tracks;
                if (!queue.IsEmpty)
                {
                    var track = queue.Dequeue();
                    session.PlayerUnload();
                    session.PlayerLoad(track);
                    session.PlayerPlay();
                    are.WaitOne();
                }
             }
                 ]]></code><code lang="vb"><![CDATA[
             Shared Async Function PlayQueueTest() As Task
                Console.WriteLine("Enter username and password (a line for each)")
                Dim session As Session = Await Spotify.CreateSession(key, cache, settings, userAgent)
                session.MusicDelivered += session_MusicDeliver
                Await Login(Console.ReadLine(), Console.ReadLine(), False)
                session.PrefferedBitrate = BitRate.Bitrate320k
                Await session.PlaylistContainer
            
                While session.PlaylistContainer.Playlists.Count < 1
                    Console.WriteLine("Found {0} playlists, retrying in 2 sec.", session.PlaylistContainer.Playlists.Count)
                    Await Task.Delay(TimeSpan.FromSeconds(2))
                End While
            
                Dim are As AutoResetEvent = New AutoResetEvent(False)
                Dim queue As PlayQueue = New PlayQueue()
                session.EndOfTrack += Function(s, e)
                                          If Not queue.IsEmpty Then
                                              Dim track = queue.Dequeue()
                                              session.PlayerUnload()
                                              session.PlayerLoad(track)
                                              session.PlayerPlay()
                                          Else
                                              are.[Set]()
                                          End If
                                      End Function
            
                Dim playlist As Playlist = Await session.PlaylistContainer.Playlists(0)
                queue.Seed = playlist.Tracks
                If Not queue.IsEmpty Then
                    Dim track = queue.Dequeue()
                    session.PlayerUnload()
                    session.PlayerLoad(track)
                    session.PlayerPlay()
                    are.WaitOne()
                End If
             End Function
                 ]]></code></code></example>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.Clear">
            -------------------------------------------------------------------------------------------------
             <summary>   Clears this object to its blank/initial state. </summary><remarks>   Aleksander, 18.02.2013. </remarks>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.Contains(SpotiFire.Track)">
            -------------------------------------------------------------------------------------------------
             <summary>   Query if this object contains the given item. </summary><remarks>   Aleksander, 18.02.2013. </remarks><param name="item"> The Track to test for containment. </param><returns>   true if the object is in this collection, false if not. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.CopyTo(SpotiFire.Track[],System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>
             Copies the elements of the <see cref="T:SpotiFire.PlayQueue" /> to an
             <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
             </summary><remarks>   Aleksander, 18.02.2013. </remarks><exception cref="T:System.ArgumentNullException">       Thrown when one or more required arguments
             are null. </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown when one or more arguments are outside
             the required range. </exception><exception cref="T:System.ArgumentException">           Thrown when one or more arguments have
             unsupported or illegal values. </exception><param name="array">      The one-dimensional array that is the destination of the elements
             copied from <see cref="T:SpotiFire.PlayQueue" />. The array must have zero-based indexing. </param><param name="arrayIndex"> The zero-based index in <paramref name="array" /> at which copying
             begins. </param>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>
             Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an
             <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
             </summary><remarks>   Aleksander, 18.02.2013. </remarks><exception cref="T:System.ArgumentNullException">       Thrown when one or more required arguments
             are null. </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown when one or more arguments are outside
             the required range. </exception><exception cref="T:System.ArgumentException">           Thrown when one or more arguments have
             unsupported or illegal values. </exception><param name="array">      The one-dimensional array that is the destination of the elements
             copied from <see cref="T:SpotiFire.PlayQueue" />. The array must have zero-based indexing. </param><param name="arrayIndex"> The zero-based index in <paramref name="array" /> at which copying
             begins. </param>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.Dequeue">
            -------------------------------------------------------------------------------------------------
             <summary>   Removes the head object from this queue. </summary><remarks>   Aleksander, 18.02.2013. </remarks><exception cref="T:System.InvalidOperationException"> The <see cref="T:SpotiFire.PlayQueue" /> is empty. </exception><returns>   The head object from this queue. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.Enqueue(SpotiFire.Track)">
            -------------------------------------------------------------------------------------------------
             <summary>   Adds an object onto the end of this queue. </summary><remarks>   Aleksander, 18.02.2013. </remarks><exception cref="T:System.ArgumentNullException"> Thrown when one or more required arguments are null. </exception><param name="track">    The track. </param>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.Peek">
            -------------------------------------------------------------------------------------------------
             <summary>   Returns the top-of-stack object without removing it. </summary><remarks>   Aleksander, 18.02.2013. </remarks><exception cref="T:System.InvalidOperationException"> The <see cref="T:SpotiFire.PlayQueue" /> is empty. </exception><returns>   The current top-of-stack object. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.ToArray">
            -------------------------------------------------------------------------------------------------
             <summary>   Convert this object into an array representation. </summary><remarks>   Aleksander, 18.02.2013. </remarks><returns>   This object as a Track[]. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.GetEnumerator">
            -------------------------------------------------------------------------------------------------
             <summary>   Returns an enumerator that iterates through a collection. </summary><remarks>   Aleksander, 18.02.2013. </remarks><returns>
             An <see cref="T:System.Collections.IEnumerator{Track}" /> object that can be used to iterate through
             the collection.
             </returns>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.System#Collections#IEnumerable#GetEnumerator">
            -------------------------------------------------------------------------------------------------
             <summary>   Returns an enumerator that iterates through a collection. </summary><remarks>   Aleksander, 18.02.2013. </remarks><returns>
             An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through
             the collection.
             </returns>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.PlayQueue.Shuffle">
            -------------------------------------------------------------------------------------------------
             <summary>   Gets or sets a value indicating whether to shuffle the tracks. </summary><value> true if shuffle, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.PlayQueue.Repeat">
            -------------------------------------------------------------------------------------------------
             <summary>   Gets or sets a value indicating whether to repeat the tracks. </summary><value> true if repeat, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.PlayQueue.Seed">
            -------------------------------------------------------------------------------------------------
             <summary>   Gets or sets the seed. </summary><value> The seed. </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.PlayQueue.Count">
            -------------------------------------------------------------------------------------------------
             <summary>
             Gets the number of elements contained in the <see cref="T:SpotiFire.PlayQueue" />.
             </summary><value>
             The number of elements contained in the <see cref="T:SpotiFire.PlayQueue" />.
             </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.PlayQueue.IsEmpty">
            -------------------------------------------------------------------------------------------------
             <summary>   Gets a value indicating whether this queue is empty. </summary><value> true if this object is empty, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.PlayQueue.BackLog">
            -------------------------------------------------------------------------------------------------
             <summary>   Gets the back log. </summary><value> The back log. </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.PlayQueue.Immidiate">
            -------------------------------------------------------------------------------------------------
             <summary>   Gets the immidiate. </summary><value> The immidiate. </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.PlayQueue.Queue">
            -------------------------------------------------------------------------------------------------
             <summary>   Gets the queue. </summary><value> The queue. </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.PlayQueue.System#Collections#ICollection#IsSynchronized">
            -------------------------------------------------------------------------------------------------
             <summary>
             Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" />
             is synchronized (thread safe).
             </summary><value>
             true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread
             safe); otherwise, false.
             </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.PlayQueue.System#Collections#ICollection#SyncRoot">
            -------------------------------------------------------------------------------------------------
             <summary>
             Gets an object that can be used to synchronize access to the
             <see cref="T:System.Collections.ICollection" />.
             </summary><value>
             An object that can be used to synchronize access to the
             <see cref="T:System.Collections.ICollection" />.
             </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.SubQueue.CopyTo(SpotiFire.Track[],System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>
             Copies the elements of the <see cref="T:SpotiFire.PlayQueue.SubQueue" /> to an
             <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
             </summary><remarks>   Aleksander, 18.02.2013. </remarks><exception cref="T:System.ArgumentNullException">       Thrown when one or more required arguments
             are null. </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown when one or more arguments are outside
             the required range. </exception><exception cref="T:System.ArgumentException">           Thrown when one or more arguments have
             unsupported or illegal values. </exception><param name="array">      The one-dimensional array that is the destination of the elements
             copied from <see cref="T:SpotiFire.PlayQueue" />. The array must have zero-based indexing. </param><param name="arrayIndex"> The zero-based index in <paramref name="array" /> at which copying
             begins. </param>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.PlayQueue.SubQueue.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>
             Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an
             <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
             </summary><remarks>   Aleksander, 18.02.2013. </remarks><exception cref="T:System.ArgumentNullException">       Thrown when one or more required arguments
             are null. </exception><exception cref="T:System.ArgumentOutOfRangeException"> Thrown when one or more arguments are outside
             the required range. </exception><exception cref="T:System.ArgumentException">           Thrown when one or more arguments have
             unsupported or illegal values. </exception><param name="array">      The one-dimensional array that is the destination of the elements
             copied from <see cref="T:SpotiFire.PlayQueue" />. The array must have zero-based indexing. </param><param name="arrayIndex"> The zero-based index in <paramref name="array" /> at which copying
             begins. </param>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="T:SpotiFire.Spotify">
            -------------------------------------------------------------------------------------------------
             <summary>   The Spotify-class. </summary><remarks>   This class is the starting-point for all interaction with Spotify.
                         From here you can create a <see cref="T:SpotiFire.Session" /> object that
                         is used to fetch playlists and play tracks.</remarks><example>   Create a new spotify-session:
                         <code><code lang="cs"><![CDATA[
             using System;
             using SpotiFire;
             
             public class SpotifyClient
             {
                 const string CLIENT_NAME = "MyClient";
                 static byte[] key = new byte[] { /* insert key here */ };
                 static string cache = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), CLIENT_NAME, "cache");
                 static string settings = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), CLIENT_NAME, "settings");
                 static string userAgent = CLIENT_NAME;
             
                 public static void Main()
                 {
                     Run().Wait();
                 }
                 
                 private static async Task Run()
                 {
                     var session = await Spotify.CreateSession(key, cache, settings, userAgent);
                     Console.WriteLine("Enter username and password (a line for each)");
                     await session.Login(Console.ReadLine(), Console.ReadLine(), false);
                     
                     // search playlists, play music etc
                     
                     await session.Logout();
                 }
             }
                             ]]></code><code lang="vb"><![CDATA[
             Imports System
             Imports SpotiFire
            
             Public Class SpotifyClient
            	Const CLIENT_NAME As String = "MyClient"
            		' insert key here
            	Shared key As Byte() = New Byte() {}
            	Shared cache As String = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), CLIENT_NAME, "cache")
            	Shared settings As String = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), CLIENT_NAME, "settings")
            	Shared userAgent As String = CLIENT_NAME
            
            	Public Shared Sub Main()
            		Run().Wait()
            	End Sub
            
            	Private Shared Function Run() As Task
            		Dim session = Await Spotify.CreateSession(key, cache, settings, userAgent)
            		Console.WriteLine("Enter username and password (a line for each)")
            		Await session.Login(Console.ReadLine(), Console.ReadLine(), False)
            
            		' search playlists, play music etc
            
            		Await session.Logout()
            	End Function
             End Class
                             ]]></code></code></example>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.Spotify.CreateSession(System.Byte[],System.String,System.String,System.String)">
            -------------------------------------------------------------------------------------------------
             <summary>   Creates a session. </summary><remarks>   This method should only be called once per process. Also, the application should
                         make sure there never is more than one instance running at once. </remarks><exception cref="T:System.InvalidOperationException"> Thrown when a session has already been created. </exception><param name="applicationKey">   The application key. </param><param name="cacheLocation">    The cache location. </param><param name="settingsLocation"> The settings location. </param><param name="userAgent">        The user agent. </param><returns>   A new spotify-session. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.Spotify.Task">
            -------------------------------------------------------------------------------------------------
             <summary>   Get's the pending task that represents the creation of a Session object. </summary><value> The task. </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="P:SpotiFire.Spotify.Session">
            -------------------------------------------------------------------------------------------------
             <summary>   Gets the current session. </summary><value> The session. </value>
            -------------------------------------------------------------------------------------------------
        </member>
    <member name="M:SpotiFire.SessionExtensions.Play(SpotiFire.Session,SpotiFire.Track)">
            -------------------------------------------------------------------------------------------------
             <summary>   A Session extension method that plays a single track and notifies it's completion. </summary><remarks><para>This single extension-method takes care of unloading (in case there are any other tracks
                         playing), loading, and starting playback of a single track. Then, when the track is complete,
                         it signals the task. This enables for easy programming of behaviour such as playing through an
                         entire playlist, or simply playing random songs non-stop. Queueing is also easily implemented
                         with this method. However, this method is not meant to be used in combinations with the ability
                         to change what track you are currently listening to. If your application (one way or another)
                         allows the user (or some AI) to select a new song, whilst there is one playing, you SHOULD not
                         use this method, as it can have un-wanted sideeffects (in the magnitude of your application
                         crashing and dying horribly).</para><para>The inner workings of this method is implemented using the <see cref="E:SpotiFire.Session.EndOfTrack" />
                          event. Every time you call this method an event-handler is attatched to the <see cref="E:SpotiFire.Session.EndOfTrack" />
                          event. This means that if you call this method again (before the song is finished),
                          it will attatch a second event-handler, and then a third, and so forth. This can probably
                          be resolved (one way or another), but for now, this functionality is <strong><u>not supported</u></strong>.</para></remarks><param name="session">  The session to act on. </param><param name="track">    The track. </param><returns>   A task that is signalled when the track completes. </returns><example>
                      Play through an enumerable of tracks:
                      <code><code lang="cs"><![CDATA[
             private async Task PlayAll(Session session, IEnumerable<Track> tracks)
             {
                 foreach(var t in tracks)
                     await session.Play(t);
             }
                         ]]></code></code></example>
            -------------------------------------------------------------------------------------------------
        </member>
  </members>
</doc>