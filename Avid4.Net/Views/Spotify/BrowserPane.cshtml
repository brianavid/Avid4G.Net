@{
    int id = ViewBag.Id == null ? 0 : Convert.ToInt32(ViewBag.Id as String);
    switch (ViewBag.Mode as string)
    {
        default:
            break;
        case "Library":
            {
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryPlaylists">
                    <div class="spotifyBrowserTitle">Playlists</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryArtists">
                    <div class="spotifyBrowserTitle">Search Artists</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryAlbums">
                    <div class="spotifyBrowserTitle">Search Albums</div>
                </div>
                <div class="spotifyBrowserLibrary browserItem" id="spotifyBrowserLibrarySearchTracks">
                    <div class="spotifyBrowserTitle">Search Tracks</div>
                </div>
            }
            break;
            
        case "Playlists":
            {
                IEnumerable<string> playlists = Spotify.GetPlayLists();
                if (playlists != null)
                {
                    foreach (var playlist in playlists)
                    {
    <div class="spotifyBrowserPlaylist spotifyBrowserItem" id="@playlist">
        <div class="spotifyBrowserTitle">@playlist</div>
    </div>
                }
            }
}
            break;
            
        case "SearchArtists":
            {
                string searchText = "";
                IEnumerable<Avid.Spotify.SpotifyData.Artist> searchedArtists = null;
                string searchQuery = ViewBag.Query;
                
                if (!String.IsNullOrEmpty(searchQuery))
                {
                    searchText = HttpUtility.UrlDecode(searchQuery);
                    searchedArtists = Spotify.SearchArtists(searchText);
                }
                
                <div class="spotifyBrowserItem spotifyBrowserPlaylistHeader"><div class="spotifyBrowserTitle">Search artists ...</div></div>
                <table class="buttonRow">
	                <tr>
                        <td style='width: 75%'><input class='searchText' id='ArtistSearchText' type='text' style='width: 100%' value='@(searchText)' /></td>
                        <td class="centeredButton" style='width: 25%'>
                            <img id="goSpotifyArtistSearch" src="/Content/Buttons/MiniRound/Search.png" />
                        </td>
                    </tr>
                </table>
                    
                if (searchedArtists != null)
                {
                    foreach (var artist in searchedArtists)
                    {
                        <div class="spotifyBrowserArtist spotifyBrowserItem" id ="@artist.Id">
                            <div class="spotifyBrowserTitle">@artist.Name</div>
                        </div>
                    }
                }
            }
            break;

        case "SearchAlbums":
            {
                string searchText = "";
                IEnumerable<Avid.Spotify.SpotifyData.Album> searchedAlbums = null;
                string searchQuery = ViewBag.Query;
                
                if (!String.IsNullOrEmpty(searchQuery))
                {
                    searchText = HttpUtility.UrlDecode(searchQuery);
                    searchedAlbums = Spotify.SearchAlbums(searchText);
                }
                
                <div class="spotifyBrowserItem spotifyBrowserPlaylistHeader"><div class="spotifyBrowserTitle">Search albums ...</div></div>
                <table class="buttonRow">
	                <tr>
                        <td style='width: 75%'><input class='searchText' id='AlbumSearchText' type='text' style='width: 100%' value='@(searchText)' /></td>
                        <td class="centeredButton" style='width: 25%'>
                            <img id="goSpotifyAlbumSearch" src="/Content/Buttons/MiniRound/Search.png" />
                        </td>
                    </tr>
                </table>
                    
                if (searchedAlbums != null)
                {
                    string lastArtist = string.Empty;

                    foreach (var album in searchedAlbums)
                    {
                        <div class="spotifyBrowserAlbum spotifyBrowserItem" id="@album.Id">
                            <div class="spotifyBrowserDisplayContext" >
                                @if (album.ArtistName != lastArtist)
                                {
                                    <div class="spotifyBrowserDisplayArtist">@album.ArtistName</div>
                                    lastArtist = album.ArtistName;
                                }
                            </div>
                            <div class="spotifyBrowserTitle"><span class="playButton">&gt;&nbsp;</span>@album.Name</div>
                        </div>
                    }
                }
            }
            break;

        case "SearchTracks":
            {
                string searchText = "";
                IEnumerable<Avid.Spotify.SpotifyData.Track> searchedTracks = null;
                string searchQuery = ViewBag.Query;
                
                if (!String.IsNullOrEmpty(searchQuery))
                {
                    searchText = HttpUtility.UrlDecode(searchQuery);
                    searchedTracks = Spotify.SearchTracks(searchText);
                }
                
                <div class="spotifyBrowserItem spotifyBrowserPlaylistHeader"><div class="spotifyBrowserTitle">Search tracks ...</div></div>
                <table class="buttonRow">
	                <tr>
                        <td style='width: 75%'><input class='searchText' id='TrackSearchText' type='text' style='width: 100%' value='@(searchText)' /></td>
                        <td class="centeredButton" style='width: 25%'>
                            <img id="goSpotifyTrackSearch" src="/Content/Buttons/MiniRound/Search.png" />
                        </td>
                    </tr>
                </table>
                    
                if (searchedTracks != null)
                {
                    string lastAlbum = string.Empty;
                    string lastArtist = string.Empty;

                    foreach (var track in searchedTracks)
                    {
                        string album = track.AlbumName;
                        string artist = track.TrackArtistNames;
                        string duration = Spotify.FormatDuration(track.Duration);
                        var trackId = track.Id;
                        var albumId = track.AlbumId;

                        <div class="spotifyBrowserTrack spotifyBrowserSearchTrack musicBrowserItem" id="@trackId">
                            @if (artist != lastArtist || album != lastAlbum)
                            {
                                <div class="spotifyBrowserDisplayContext" >
                                    @if (artist != lastArtist)
                                    {
                                        <div class='spotifyBrowserDisplayArtist'>@artist</div>
                                        lastArtist = artist;
                                    }

                                    @if (album != lastAlbum)
                                    {
                                        <div class='spotifyBrowserDisplayAlbum'>@album</div>
                                        lastAlbum = album;
                                    }
                                </div>
                            }

                            <div class="spotifyBrowserTitle"><span class="playButton">&gt;&nbsp;</span>@track.Name</div>
                            @if (!string.IsNullOrEmpty(duration))
                            {
                                <div class="spotifyBrowserDuration">@duration</div>
                            }
                        </div>
                    }
                }
            }
            break;

        case "ArtistInfo":
            {
                Avid.Spotify.SpotifyData.Artist artist = Spotify.GetArtistById(id);
                <div class="spotifyPlayingTrack">
		            <div class="spotifyInfoArtist">@artist.Name</div>
	            </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryArtistAlbums">
                    <div class="spotifyBrowserTitle">List Albums</div>
                </div>
                if (!string.IsNullOrEmpty(artist.Biography)) {
                    <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryArtistBiography">
                        <div class="spotifyBrowserTitle">Biography</div>
                    </div>
                }
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibrarySimilarArtists">
                    <div class="spotifyBrowserTitle">Similar Artists</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem swipeToCancel spotifyBrowserCancel">
                    <div class="spotifyBrowserTitle">Cancel</div>
                </div>
                
                ViewBag.ArtistId = artist.Id;
            }
            break;

        case "AlbumInfo":
            {
                Avid.Spotify.SpotifyData.Album album = Spotify.GetAlbumById(id);
                <div class="spotifyPlayingTrack">
		            <img src="/Spotify/GetAlbumImage/@(album.Id)" class="spotifyInfoImage" alt="Playing Track Image" width="120" height="120" />
		            <div class="spotifyInfoArtist">@album.ArtistName</div>
		            <div class="spotifyInfoAlbum">@album.Name</div>
	            </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryPlayAlbum">
                    <div class="spotifyBrowserTitle">Play Album</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryAppendAlbum">
                    <div class="spotifyBrowserTitle">Append Album</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryAlbumTracks">
                    <div class="spotifyBrowserTitle">List Tracks</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryAlbumArtist">
                    <div class="spotifyBrowserTitle">Artist Info</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryAddAlbumToPlaylist">
                    <div class="spotifyBrowserTitle">Add Album to Playlist</div>
                </div>
                if (ViewBag.Name != null)
                {
                    <div class="spotifyBrowserLibrary spotifyBrowserItem spotifyBrowserPlaylistRemoveAlbum">
                        <div class="spotifyBrowserTitle">Remove Album from Playlist "@ViewBag.Name"</div>
                    </div>
                }
                <div class="spotifyBrowserLibrary spotifyBrowserItem swipeToCancel spotifyBrowserCancel">
                    <div class="spotifyBrowserTitle">Cancel</div>
                </div>
    
                ViewBag.AlbumId = album.Id;
                ViewBag.ArtistId = album.ArtistId;
            }
            break;

        case "TrackInfo":
            {
                Avid.Spotify.SpotifyData.Track track = Spotify.GetTrackById(id);
                <div class="spotifyPlayingTrack">
		            <img src="/Spotify/GetAlbumImage/@(track.AlbumId)" class="spotifyInfoImage" alt="Playing Track Image" width="120" height="120" />
            		<div class="spotifyInfoTrackName">@(track.Name)</div>
		            <div class="spotifyInfoArtist">@(track.TrackArtistNames)</div>
		            <div class="spotifyInfoAlbum">@(track.AlbumName)</div>
	            </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryPlayTrack">
                    <div class="spotifyBrowserTitle">Play Track</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryAppendTrack">
                    <div class="spotifyBrowserTitle">Append Track</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryTrackAlbum">
                    <div class="spotifyBrowserTitle">Album Info</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryTrackArtist">
                    <div class="spotifyBrowserTitle">Artist Info</div>
                </div>
                <div class="spotifyBrowserLibrary spotifyBrowserItem" id="spotifyBrowserLibraryAddTrackToPlaylist">
                    <div class="spotifyBrowserTitle">Add Track to Playlist</div>
                </div>
                if (ViewBag.Name != null)
                {
                    <div class="spotifyBrowserLibrary spotifyBrowserItem spotifyBrowserPlaylistRemoveTrack">
                        <div class="spotifyBrowserTitle">Remove Track from Playlist "@ViewBag.Name"</div>
                    </div>
                }
                <div class="spotifyBrowserLibrary spotifyBrowserItem swipeToCancel spotifyBrowserCancel">
                    <div class="spotifyBrowserTitle">Cancel</div>
                </div>
    
                ViewBag.TrackId = track.Id;
                ViewBag.AlbumId = track.AlbumId;
                ViewBag.ArtistId = track.TrackFirstArtistId;
            }
            break;

        case "ArtistBiography":
            {
                Avid.Spotify.SpotifyData.Artist artist = Spotify.GetArtistById(id);
                <div class="spotifyPlayingTrack">
		            <div class="spotifyInfoArtist">@artist.Name</div>
	            </div>
                <div class="spotifyBrowserLibrary spotifyBrowserBiography">@WebUtility.HtmlDecode(System.Text.RegularExpressions.Regex.Replace(artist.Biography, "<[^>]*(>|$)", string.Empty))</div>
            }
            break;

        case "AlbumsOfPlayist":
        case "AlbumsOfArtist":
            {
                IEnumerable<Avid.Spotify.SpotifyData.Album> albums = null;

                switch (ViewBag.Mode as string)
                {
                    case "AlbumsOfPlayist":
                        albums = Spotify.GetPlayListAlbums(ViewBag.Name);
                        <div class="spotifyBrowserItem spotifyBrowserPlaylistHeader"><div class="spotifyBrowserTitle">Playlist "@ViewBag.Name"</div></div>
                        break;
                    case "AlbumsOfArtist":
                        albums = Spotify.GetAlbumsForArtist(id);
                        break;
                }
                if (albums != null)
                {
                    string lastArtist = string.Empty;

                    foreach (var album in albums)
                    {
                        <div class="spotifyBrowserAlbum spotifyBrowserItem" id="@album.Id">
                            <div class="spotifyBrowserDisplayContext" >
                                @if (album.ArtistName != lastArtist)
                                {
                                    <div class="spotifyBrowserDisplayArtist">@album.ArtistName</div>
                                    lastArtist = album.ArtistName;
                                }
                            </div>
                            <div class="spotifyBrowserTitle"><span class="playButton">&gt;&nbsp;</span>@album.Name</div>
                        </div>
                    }
                }
            }
            break;

        case "GetSimiliarArtists":
            {
                Avid.Spotify.SpotifyData.Artist thisArtist = Spotify.GetArtistById(id);
                <div class="spotifyBrowserArtist spotifyBrowserItem" id ="@thisArtist.Id">
                    <div class="spotifyBrowserTitle">@thisArtist.Name</div>
                </div>
                IEnumerable<Avid.Spotify.SpotifyData.Artist> artists = Spotify.GetSimilarArtistsForArtist(id);

                if (artists != null)
                {
                    foreach (var artist in artists)
                    {
                        <div class="spotifyBrowserArtist spotifyBrowserItem" id ="@artist.Id">
                            <div class="spotifyBrowserTitle">@artist.Name</div>
                        </div>
                    }
                }
            }
            break;

        case "TracksOnAlbum":
            {
                IEnumerable<Avid.Spotify.SpotifyData.Track> tracks = Spotify.GetTracksForAlbum(id);

                if (tracks != null)
                {
                    string lastAlbum = string.Empty;
                    string lastArtist = string.Empty;

                    foreach (var track in tracks)
                    {
                        string album = track.AlbumName;
                        string artist = track.TrackArtistNames;
                        string duration = Spotify.FormatDuration(track.Duration);
                        var trackId = track.Id;
                        var albumId = track.AlbumId;
                        string playButton = ViewBag.Append != null ? "+ " : "> ";

                        <div class="spotifyBrowserTrack spotifyBrowserSearchTrack spotifyBrowserItem" id="@trackId">
                            @if (artist != lastArtist || album != lastAlbum)
                            {
                                <div class="spotifyBrowserDisplayContext" >
                                    @if (artist != lastArtist)
                                    {
                                        <div class='spotifyBrowserDisplayArtist'>@artist</div>
                                        lastArtist = artist;
                                    }

                                    @if (album != lastAlbum)
                                    {
                                        <div class='spotifyBrowserDisplayAlbum'>@album</div>
                                        lastAlbum = album;
                                    }
                                </div>
                            }

                            <div class="spotifyBrowserTitle"><span class="playButton">@playButton</span>@track.Name</div>

                            @if (!string.IsNullOrEmpty(duration))
                            {
                                <div class="spotifyBrowserDuration">@duration</div>
                            }
                        </div>
                    }
                }
            }

            break;

        case "PlayListsAdd":
            {
                string actionClass = "";
                if (ViewBag.AlbumId != null)
                {
                    actionClass = "spotifyBrowserPlaylistAddAlbum";
                    Avid.Spotify.SpotifyData.Album album = Spotify.GetAlbumById(Convert.ToInt32(ViewBag.AlbumId as String));
                    <div class="spotifyBrowserItem spotifyBrowserPlaylistHeader"><div class="spotifyBrowserTitle">Add album "@album.Name" to ...</div></div>
                }
                else if (ViewBag.TrackId != null)
                {
                    actionClass = "spotifyBrowserPlaylistAddTrack";
                    Avid.Spotify.SpotifyData.Track track = Spotify.GetTrackById(Convert.ToInt32(ViewBag.TrackId as String));
                    <div class="spotifyBrowserItem spotifyBrowserPlaylistHeader"><div class="spotifyBrowserTitle">Add track "@track.Name" to ...</div></div>
                }
                if (ViewBag.ArtistId != null)
                {
                    Avid.Spotify.SpotifyData.Artist artist = Spotify.GetArtistById(Convert.ToInt32(ViewBag.ArtistId as String));
                    <div class="@actionClass spotifyBrowserItem" id="@artist.Name">
                        <div class="spotifyBrowserTitle">@artist.Name</div>
                    </div>
                }
                <div class="spotifyBrowserItem">
                    <table class="buttonRow">
	                    <tr>
                            <td class="centeredButton" style='width: 10%'>
                                <img id="@(actionClass)New" src="/Content/Buttons/SmallRound/Plus.png" />
                            </td>
                            <td style='width: 90%'><input class='spotifyBrowserPlaylistNewName' id='spotifyBrowserPlaylistNewName' type='text' style='width: 95%' /></td>
                        </tr>
                    </table>
                </div>
                IEnumerable<string>playlists = Spotify.GetPlayLists();
                if (playlists != null)
                {
                    foreach (var playlist in playlists)
                    {
                        <div class="@actionClass spotifyBrowserItem" id="@playlist">
                            <div class="spotifyBrowserTitle">@playlist</div>
                        </div>
                    }
                }
            }
            break;
    }

    if (ViewBag.ArtistId != null)
    {
        <span id="ArtistInfoId" style="display:none">@ViewBag.ArtistId</span>
    }
    if (ViewBag.AlbumId != null)
    {
        <span id="AlbumInfoId" style="display:none">@ViewBag.AlbumId</span>
    }
    if (ViewBag.TrackId != null)
    {
        <span id="TrackInfoId" style="display:none">@ViewBag.TrackId</span>
    }
    if (ViewBag.Name != null)
    {
        <span id="PlaylistName" style="display:none">@ViewBag.Name</span>
    }
}